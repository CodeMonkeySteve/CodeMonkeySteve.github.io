<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Finagle</title>
 <link href="http://finagle.org/atom.xml" rel="self"/>
 <link href="http://finagle.org/"/>
 <updated>2011-05-12T23:58:38-07:00</updated>
 <id>http://finagle.org/</id>
 <author>
   <name>Steve Sloan</name>
   <email>steve@finagle.org</email>
 </author>

 
 <entry>
   <title>Excluding a bad RPM package</title>
   <link href="http://finagle.org/2011/05/excluding-a-bad-rpm-package.html"/>
   <updated>2011-05-13T00:00:00-07:00</updated>
   <id>http://finagle.org/2011/05/excluding-a-bad-rpm-package</id>
   <content type="html">&lt;p&gt;I&amp;#8217;m a big fan of &lt;a href=&quot;http://kde.org&quot;&gt;&lt;span class=&quot;caps&quot;&gt;KDE&lt;/span&gt;&lt;/a&gt;, as both a user and a developer, and &lt;a href=&quot;http://akregator.kde.org&quot;&gt;Akregator&lt;/a&gt; is my &lt;span class=&quot;caps&quot;&gt;RSS&lt;/span&gt; feed reader of choice.  I&amp;#8217;m also a big fan of &lt;span class=&quot;caps&quot;&gt;RSS&lt;/span&gt; feeds, using them for almost all my regular daily information consumption.&lt;/p&gt;
&lt;p&gt;So imagine my notable lack of delight when, after doing a regular &lt;span class=&quot;caps&quot;&gt;YUM&lt;/span&gt; update, I discovered that the latest version of Akregator has &lt;a href=&quot;https://bugs.kde.org/show_bug.cgi?id=271149&quot;&gt;a serious bug that makes it almost unusable&lt;/a&gt;.  And I didn&amp;#8217;t even want the new version anyway.&lt;/p&gt;
&lt;p&gt;Ah, but since I&amp;#8217;m using &lt;span class=&quot;caps&quot;&gt;RPM&lt;/span&gt; and &lt;span class=&quot;caps&quot;&gt;YUM&lt;/span&gt;, the fix for this sort of thing is actually pretty simple, although it took me a few minutes of reading man pages to work it out, so I thought I should share the fruits of my labor.  Here&amp;#8217;s how you exclude a bad &lt;span class=&quot;caps&quot;&gt;RPM&lt;/span&gt; package:&lt;/p&gt;
&lt;p&gt;First, find the last good version of the appropriate package:&lt;/p&gt;
&lt;blockquote&gt;&lt;pre&gt;&lt;code&gt;
$ rpm -qf `which akregator`
kdepim-4.4.11.1-2.fc14.x86_64

$ sudo yum list kdepim --showduplicates
...
Installed Packages
kdepim.x86_64        7:4.4.11.1-2.fc14
Available Packages
kdepim.x86_64        6:4.4.6-2.fc14
kdepim.x86_64        7:4.4.11.1-2.fc14
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;In this case, the desired version is 4.4.6 (the &amp;#8220;6:&amp;#8221; is the epoch, the &amp;#8220;-2&amp;#8221; is the release, and the &amp;#8220;fc14&amp;#8221; is the architecture).&lt;/p&gt;
&lt;p&gt;Next, downgrade the package.  If there are any dependency errors, you&amp;#8217;ll also need to downgrade those packages too.&lt;/p&gt;
&lt;blockquote&gt;&lt;pre&gt;&lt;code&gt;
$ sudo yum downgrade kdepim-4.4.6
...
Error: Package: 7:kdepim-libs-4.4.11.1-2.fc14.x86_64
...

$ sudo yum downgrade kdepim-4.4.6 kdepim-libs
...
Removed:
  kdepim.x86_64 7:4.4.11.1-2.fc14                                                   kdepim-libs.x86_64 7:4.4.11.1-2.fc14

Installed:
  kdepim.x86_64 6:4.4.6-2.fc14                                                      kdepim-libs.x86_64 6:4.4.6-2.fc14

Complete!
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;And finally, edit &lt;code&gt;/etc/yum.conf&lt;/code&gt; and add the offending package version to an &lt;code&gt;exclude&lt;/code&gt; line:&lt;/p&gt;
&lt;blockquote&gt;&lt;pre&gt;&lt;code&gt;
[main]
...
exclude=kdepim-4.4.11.1 kdepim-libs-4.4.11.1
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;Take that, &lt;code&gt;kdepims-4.4.11&lt;/code&gt;. &lt;em&gt;&lt;strong&gt;plonk&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>AudioBook Log</title>
   <link href="http://finagle.org/2011/05/audiobook-log.html"/>
   <updated>2011-05-09T00:00:00-07:00</updated>
   <id>http://finagle.org/2011/05/audiobook-log</id>
   <content type="html">&lt;p&gt;For over a year I&amp;#8217;ve been commuting for almost 2 hours a day, and in an attempt to stave-off potentially lethal boredom, I&amp;#8217;ve been passing the time listening to audiobooks.  Here&amp;#8217;s what I&amp;#8217;ve been reading/listening to:&lt;/p&gt;
&lt;p&gt;Note, format is: &lt;em&gt;title&lt;/em&gt; (&lt;em&gt;year&lt;/em&gt;), &lt;em&gt;authors&lt;/em&gt; (&lt;em&gt;readers&lt;/em&gt;)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Daily-Show-Stewart-Presents-Earth/dp/044657922X&quot;&gt;Earth: A Visitor&amp;#8217;s Guide to the Human Race&lt;/a&gt; (2010), Jon Stewart et al. (Jon Stewart)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Freakonomics-Economist-Explores-Hidden-Everything/dp/0060731338&quot;&gt;Freakonomics: A Rogue Economist Explores the Hidden Side of Everything&lt;/a&gt; (2005), Steven D. Levitt and Stephen J. Dubner (Stephen J. Dubner)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/God-Not-Great-Religion-Everything/dp/0446697966&quot;&gt;God Is Not Great: How Religion Poisons Everything&lt;/a&gt; (2009), Christopher Hitchens (Christopher Hitchens)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Fleet-Worlds-Larry-Niven/dp/0765357836&quot;&gt;Fleet of Worlds&lt;/a&gt; (2007), Larry Niven and Edward M. Lerner (Tom Weiner)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Juggler-Worlds-Larry-Niven/dp/0765357844&quot;&gt;Juggler of Worlds&lt;/a&gt; (2008), Larry Niven and Edward M. Lerner (Tom Weiner)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Destroyer-Worlds-Larry-Niven/dp/B004A14W9U&quot;&gt;Destroyer of Worlds&lt;/a&gt; (2009), Larry Niven and Edward M. Lerner (Tom Weiner)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Betrayer-Worlds-Larry-Niven/dp/0765326086&quot;&gt;Betrayer of Worlds&lt;/a&gt; (2010), Larry Niven and Edward M. Lerner (Tom Weiner)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/God-Delusion-Richard-Dawkins/dp/0618918248&quot;&gt;The God Delusion&lt;/a&gt; (2008), Richard Dawkins (Richard Dawkins)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Greatest-Show-Earth-Evidence-Evolution/dp/1416594795&quot;&gt;The Greatest Show on Earth: The Evidence for Evolution&lt;/a&gt; (2010), Richard Dawkins (Richard Dawkins)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Ancestors-Tale-Pilgrimage-Dawn-Evolution/dp/061861916X&quot;&gt;The Ancestor&amp;#8217;s Tale: A Pilgrimage to the Dawn of Evolution&lt;/a&gt; (2005), Richard Dawkins (Richard Dawkins)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/End-Faith-Religion-Terror-Future/dp/0393035158&quot;&gt;The End of Faith: Religion, Terror, and the Future of Reason&lt;/a&gt; (2005), Sam Harris (Brian Emerson)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Letter-Christian-Nation-Vintage-Harris/dp/0307278778&quot;&gt;Letter to a Christian Nation&lt;/a&gt; (2008), Sam Harris (Jordan Bridges)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Moral-Landscape-Science-Determine-Values/dp/1439171211&quot;&gt;The Moral Landscape: How Science Can Determine Human Values&lt;/a&gt; (2010), Sam Harris (Sam Harris)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Unpleasant-Profession-Jonathan-Hoag/dp/0441854575&quot;&gt;The Unpleasant Profession of Jonathan Hoag&lt;/a&gt; (1942), Robert Heinlein (Tom Weiner)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Cat-Who-Walks-through-Walls/dp/0441094996&quot;&gt;The Cat Who Walks Through Walls&lt;/a&gt; (1985), Robert Heinlein (Tom Weiner)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Integral-Trees-Larry-Niven/dp/B00266CDOC&quot;&gt;The Integral Trees&lt;/a&gt; (1984), Larry Niven (Pat Bottino)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Smoke-Ring-Larry-Niven/dp/B001NDROG6&quot;&gt;The Smoke Ring&lt;/a&gt; (1987), Larry Niven (Pat Bottino)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Inferno-Henri-Barbusse/dp/1617200875&quot;&gt;Inferno&lt;/a&gt; (1976), Larry Niven and Jerry Pournelle (Tom Weiner)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Escape-Hell-Larry-Niven/dp/B0030EG174&quot;&gt;Escape from Hell&lt;/a&gt; (2009), Larry Niven and Jerry Pournelle (Tom Weiner)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Ringworlds-Children-Larry-Niven/dp/0765341026&quot;&gt;Ringworld&amp;#8217;s Children&lt;/a&gt; (2004), Larry Niven (?)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Draco-Tavern-Larry-Niven/dp/0765347717&quot;&gt;The Draco Tavern&lt;/a&gt; (2006), Larry Niven (Tom Weiner)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Radio-Free-Albemuth-Philip-Dick/dp/0679781374&quot;&gt;Radio Free Albemuth&lt;/a&gt; (1976), Philip K. Dick (Tom Weiner)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Borderlands-Science-Where-Sense-Nonsense/dp/0195157982&quot;&gt;The Borderlands of Science: Where Sense Meets Nonsense&lt;/a&gt; (2001), Michael Shermer (Grover Gardener)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/People-Believe-Weird-Things-Pseudoscience/dp/0805070893&quot;&gt;Why People Believe Weird Things: Pseudoscience, Superstition, and Other Confusions of Our Time&lt;/a&gt; (2002), Michael Shermer (Michael Shermer)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Science-Good-Evil-People-Gossip/dp/0805077693&quot;&gt;The Science of Good and Evil: Why People Cheat, Gossip, Care, Share, and Follow the Golden Rule&lt;/a&gt; (2004), Michael Shermer (Michael Shermer)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Pale-Blue-Dot-Vision-Future/dp/0345376595&quot;&gt;Pale Blue Dot: A Vision of the Human Future in Space&lt;/a&gt; (1994), Carl Sagan (Carl Sagan)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Demon-Haunted-World-Science-Candle-Dark/dp/0345409469&quot;&gt;The Demon-Haunted World: Science as a Candle in the Dark&lt;/a&gt; (1995), Carl Sagan (Michael Page)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/JPod-Novel-Douglas-Coupland/dp/1596911050&quot;&gt;JPod&lt;/a&gt; (2006), Douglas Coupland (Marc Cashman)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While all of the books were good, the quality of the audiobook depends almost entirely on the voice of the person reading it.  So far my favorites are &lt;a href=&quot;http://www.audiofilemagazine.com/gvpages/A2427.shtml&quot;&gt;Tom Weiner&amp;#8217;s&lt;/a&gt; rich baritone and &lt;a href=&quot;http://en.wikipedia.org/wiki/Richard_Dawkins&quot;&gt;Richard Dawkins&amp;#8217;&lt;/a&gt; pleasant english accent.  By far the worst, though, is anything read by Carl Sagan: I can highly recommend Carl&amp;#8217;s plodding pace and odd word emphasis to insomniacs who don&amp;#8217;t respond to strong drugs.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Toward a More Perfect Mongo ODM</title>
   <link href="http://finagle.org/2011/04/toward-a-more-perfect-mongo-odm.html"/>
   <updated>2011-04-24T00:00:00-07:00</updated>
   <id>http://finagle.org/2011/04/toward-a-more-perfect-mongo-odm</id>
   <content type="html">&lt;h2&gt;MongoDB, MongoMapper, and Mongoid&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;m now well into my third Rails project using the &lt;a href=&quot;http://mongodb.org&quot;&gt;MongoDB&lt;/a&gt; document database, and while I&amp;#8217;m still a big fan of&lt;br /&gt;
Mongo, I&amp;#8217;ve been underwhelmed by the &lt;acronym title=&quot;Object-Document Mapper&quot;&gt;&lt;span class=&quot;caps&quot;&gt;ODM&lt;/span&gt;&lt;/acronym&gt;s I&amp;#8217;ve used.  On the first project, I started with &lt;a href=&quot;http://mongomapper.com&quot;&gt;MongoMapper&lt;/a&gt;, which is very mature and well-supported, but was a little klunky and tried a little too hard to be like &lt;a href=&quot;http://ar.rubyonrails.org&quot;&gt;ActiveRecord&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the second project, I switched to &lt;a href=&quot;http://mongoid.org&quot;&gt;Mongoid&lt;/a&gt;, which was a huge improvement.  It played nicely with ActiveSupport and ActiveModel, and had better support for doing things the Mongo way.  But in the end, it had several nasty bugs related to associations and embedded documents, and the better I understood what I wanted from an &lt;span class=&quot;caps&quot;&gt;ODM&lt;/span&gt;, the more I realized that Mongoid wasn&amp;#8217;t it.&lt;/p&gt;
&lt;h2&gt;The Alternatives&lt;/h2&gt;
&lt;h5&gt;&lt;a href=&quot;https://github.com/SFEley/candy&quot;&gt;Candy&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;I looked into Candy, and found its approach intriguingly fresh.  Models don&amp;#8217;t have to specify field names or types, and can be Arrays or Hashes or any other Ruby type.  But I don&amp;#8217;t like the lack of control over the serialization process (e.g. &lt;code&gt;find&lt;/code&gt;, &lt;code&gt;save&lt;/code&gt;, callbacks, validations, etc.), nor the absence of any sort of relational mechanism.  Like Mongoid, it does have a nice query Criteria &lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt;, though.&lt;/p&gt;
&lt;h5&gt;&lt;a href=&quot;http://mongomatic.com&quot;&gt;Mongomatic&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;I&amp;#8217;m not sure Mongomatic even qualifies as an &lt;span class=&quot;caps&quot;&gt;ODM&lt;/span&gt;, as it doesn&amp;#8217;t seem to do any mapping.  From what I&amp;#8217;ve seen, it&amp;#8217;s just a thin wrapper around the Ruby MongoDB driver, adding little.  I don&amp;#8217;t know why anyone would bother using it.&lt;/p&gt;
&lt;h5&gt;&lt;a href=&quot;https://github.com/carlosparamio/mongo_odm&quot;&gt;MongoODM&lt;/a&gt; (&lt;a href=&quot;https://github.com/CodeMonkeySteve/mongo_odm/&quot;&gt;my fork&lt;/a&gt;)&lt;/h5&gt;
&lt;p&gt;It could use a better name, but it&amp;#8217;s a nice &lt;span class=&quot;caps&quot;&gt;ODM&lt;/span&gt;, if a bit immature.  I especially like its support for embedded documents, i.e. you don&amp;#8217;t have to do anything special, just assign a variable of the specified Mongo-serializeable type (Document or otherwise) to a field, and it Just Works.  It also supports Arrays and Hashes that can take any heterogeneous collection of types.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s also better designed under the hood than Mongoid or MongoMapper, taking full advantage of Ruby conventions to be easily hackable.  Definitely the best closest candidate to my Perfect &lt;span class=&quot;caps&quot;&gt;ODM&lt;/span&gt;.  MongoODM is definitely the best candidate for Perfect &lt;span class=&quot;caps&quot;&gt;ODM&lt;/span&gt; I&amp;#8217;ve yet seen.&lt;/p&gt;
&lt;h2&gt;The Perfect &lt;span class=&quot;caps&quot;&gt;ODM&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Here&amp;#8217;s what I really in my perfect Mongo &lt;span class=&quot;caps&quot;&gt;ODM&lt;/span&gt;:&lt;/p&gt;
&lt;h5&gt;Plays Well with Rails&lt;/h5&gt;
&lt;p&gt;Like it or not, the ActiveRecord &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; is the standard convention for performing DB operations.  And to the extent that &lt;span class=&quot;caps&quot;&gt;SQL&lt;/span&gt; and MongoDB are conceptually similar, they should maintain the same &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;.  This makes it easier to integrate with other software that may assume AR conventions, but more importantly, it keeps me from having to learn and remember a whole new set of only-slightly-different APIs.&lt;/p&gt;
&lt;h5&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Duck_typing&quot;&gt;Duck typing&lt;/a&gt; and Other Ruby-isms&lt;/h5&gt;
&lt;p&gt;This is one big feature that ActiveRecord does not (and cannot) have, but which Mongo gives us almost for free &amp;#8212; dynamic typing, just like native Ruby.  Mongoid supports this for polymorphism, and MongoODM also supports dynamic types in Hashes and Arrays, and it was this fact that original attracted me to it.  I have no problem with declaring document fields, but why should I have to specify the type?  For that matter, why should I be constrained to a static type?&lt;/p&gt;
&lt;h5&gt;Schema &lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;Even though I want the freedom to store any value of any type in any field, I know that schemas are still important, both for validation and configuration management.  All ODMs provide ActiveRecord-style type-specifiers and validations (Mongoid and MongoODM also use ActiveModel), but I&amp;#8217;d like to see document schemata become a top-level object, some superset of &lt;a href=&quot;http://json-schema.org&quot;&gt;&lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt; Schema&lt;/a&gt;, with an friendly and extensible &lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt;.  Something like this:&lt;/p&gt;
&lt;blockquote&gt;&lt;pre&gt;&lt;code&gt;class Person
    schema do
      property(:name) {
        type   String
        length 1..20
        required
      }
      property(:phone) {
        type Phone
        optional
      }
      property(:aliases) {
        type Array.of(String)
        optional
      }
      property(:vehicles) {
        type Array.of(Car, Boat, Spaceship)
        required
        default []
      }
      additional_properties false
    end
  end
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;Once the schema is nestled into object form, there&amp;#8217;s a whole bunch of interesting things you can do, in addition to validations:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Schema versioning and heterogeneous collections&lt;/li&gt;
	&lt;li&gt;Data migrations and schema management&lt;/li&gt;
	&lt;li&gt;Client-side validations (via &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt; Schema)&lt;/li&gt;
	&lt;li&gt;Automatic form generation (think: &lt;a href=&quot;http://activescaffold.com&quot;&gt;ActiveScaffold&lt;/a&gt; on steroids)&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;References and Associations&lt;/h5&gt;
&lt;p&gt;This area gets a bit tricky, partially because of SQL&amp;#8217;s wretched legacy of foriegn keys and join tables, but also because the problem is just inherently difficult. Ideally, the database or &lt;span class=&quot;caps&quot;&gt;ODM&lt;/span&gt; would provide an equivalent to Ruby&amp;#8217;s garbage-collected memory management system, where any document field could be a reference to any other object of any type, and all objects would be automatically destroyed when no longer used.&lt;/p&gt;
&lt;p&gt;MongoDB actually comes pretty close with their support for &lt;a href=&quot;http://www.mongodb.org/display/DOCS/Database+References&quot;&gt;Database References&lt;/a&gt;.  These allow you to assign to a document field a reference to any document in any collection.  I&amp;#8217;ve expanded MongoODM with a transparent Reference proxy, and assigning a reference to a field is as simple as calling &lt;code&gt;.reference&lt;/code&gt; (or &lt;code&gt;.ref&lt;/code&gt;) on a document.  I&amp;#8217;ve been looking at adding something similar for &lt;a href=&quot;http://www.mongodb.org/display/DOCS/GridFS+Specification&quot;&gt;GridFS attachments&lt;/a&gt;, but with a reference count to allow easy sharing of large binary objects between documents.&lt;/p&gt;
&lt;h2&gt;The Future &amp;#8212; No &lt;span class=&quot;caps&quot;&gt;ODM&lt;/span&gt;?&lt;/h2&gt;
&lt;p&gt;This post is mostly just a dump of ideas I&amp;#8217;ve had while working to expand MongoODM.  But I find myself working more and more in Javascript, these days, and taking advantage of things like &lt;a href=&quot;http://jquery.com&quot;&gt;jQuery&lt;/a&gt; and &lt;a href=&quot;http://documentcloud.github.com/backbone&quot;&gt;Backbone&lt;/a&gt; to build rich client applications in the browser.  In this situation, which I think will become more common, I don&amp;#8217;t need so much &lt;span class=&quot;caps&quot;&gt;ODM&lt;/span&gt; support in Ruby/Rails, and more-so in Javascript.  So now I&amp;#8217;m contemplating a MongoDB interface in JavaScript, passing through some sort of &lt;a href=&quot;http://rack.rubyforge.org&quot;&gt;Rack&lt;/a&gt; proxy to perform access control.  I&amp;#8217;ll let you know how it turns out &amp;#8230;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Back from the Dead</title>
   <link href="http://finagle.org/2011/03/back-from-the-dead.html"/>
   <updated>2011-03-20T00:00:00-07:00</updated>
   <id>http://finagle.org/2011/03/back-from-the-dead</id>
   <content type="html">&lt;p&gt;Greetings, everyone!  Welcome to my new-and-improved blog.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve decided to merge my coding blog (&amp;#8220;One-Banana Problem&amp;#8221;), which has gone woefully under-updated, with my website (&amp;#8220;finagle.org&amp;#8221;), which is gone woefully under-used, and you&amp;#8217;re now looking at the result.  If you&amp;#8217;re thinking it looks a lot like One-Banana Problem &amp;#8230;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;You actually read my blog? Wow thanks, you&amp;#8217;re awesome, that almost doubles my audience!&lt;/li&gt;
	&lt;li&gt;It looks the same because it&amp;#8217;s a port of the original content and style from &lt;span class=&quot;caps&quot;&gt;OBP&lt;/span&gt; to a new platform.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Why a new platform?  I&amp;#8217;m glad you asked, therein lies the story &amp;#8230;&lt;/p&gt;
&lt;h5&gt;The Story&lt;/h5&gt;
&lt;p&gt;It all started a few months back, when I went to compose a long-overdue &lt;span class=&quot;caps&quot;&gt;OBP&lt;/span&gt; post, and discovered that Mephisto wasn&amp;#8217;t letting me login.  How rude.  A quick Google not only failed to provide a solution to the problem, but indicated that Mephisto was no longer maintained or supported.  The consensus appeared to be to migrate to a combination of &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll&lt;/a&gt;, a static-site generator, and the &lt;a href=&quot;http://disqus.com/&quot;&gt;Disqus&lt;/a&gt; commenting system.  Over the months since, I&amp;#8217;ve followed the same path, deploying the new blog on &lt;a href=&quot;http://heroku.com&quot;&gt;Heroku&lt;/a&gt;, my preferred hosting service.  Porting the content was fairly easy, but porting the theme not so much.&lt;/p&gt;
&lt;h5&gt;Jekyll&lt;/h5&gt;
&lt;p&gt;The best I can say about Jekyll is that it works well enough to get things running again.  At first, I was considering using it for some static brochure sites for friends and family, but after getting it working I&amp;#8217;ve decided it&amp;#8217;s not good for me for a few reasons:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;No &lt;a href=&quot;http://haml-lang.com&quot;&gt;&lt;span class=&quot;caps&quot;&gt;HAML&lt;/span&gt;&lt;/a&gt; support. Although there are lots of hacks and extensions that claim to fix this, I could never get any of them to work.&lt;/li&gt;
	&lt;li&gt;Heroku provides Varnish to automatically cache pages, so generating static &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; content doesn&amp;#8217;t give any significant speed improvement.&lt;/li&gt;
	&lt;li&gt;I do have to check-in all that static content to Git, which just needlessly bloats the Heroku slug.&lt;/li&gt;
	&lt;li&gt;Heroku provides a Rack interface, which means I still need to use a (tiny) &lt;a href=&quot;http://sinatrarb.com&quot;&gt;Sinatra&lt;/a&gt; app to serve that static content.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While I can appreciate the idea of storing the content in the blog code itself, with metadata in a &lt;span class=&quot;caps&quot;&gt;YAML&lt;/span&gt; header block and the copy in &lt;a href=&quot;http://en.wikipedia.org/wiki/Textile_(markup_language)&quot;&gt;Textile&lt;/a&gt;, I think I&amp;#8217;ll stick to Sinatra for my static sites.  I&amp;#8217;m already working on a &lt;span class=&quot;caps&quot;&gt;CMS&lt;/span&gt;-ish project that will probably replace Jekyll as soon as it&amp;#8217;s done enough.&lt;/p&gt;
&lt;h5&gt;Moving Forward&lt;/h5&gt;
&lt;p&gt;I originally started One-Banana Problem in 2006, after getting laid-off from a failing startup.  I wanted to make the switch from a C++ developer to a Ruby/Rails guy, and I thought a blog would help not only to share my hard-won knowledge, but also to market myself to the Rails community in hopes of finding a good job.  To that end, I tried to keep the tone professional and the content mostly related to Ruby and Rails.&lt;/p&gt;
&lt;p&gt;But here we are, five years later, and now I&amp;#8217;m living living the dream of a full-time Ruby developer (woo-hoo!).  However, having achieved that goal, I find myself with less motivation for blogging, and more importantly, with less time.&lt;/p&gt;
&lt;p&gt;To counter this trend I&amp;#8217;ve decided that, as part of The Great Blog Renaming, that I would expand the scope from a mostly coding-centric blog, to including hacking of all kinds.  I am a geek, after all, and to my brain all problems have technological solutions.  I have some interesting ideas for things like secure voting, digital currency, and even improvements to the democratic process (which hasn&amp;#8217;t changed significantly in centuries), and I&amp;#8217;ll try to find the time to comment on these sorts of political and social issues more freely in the future.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve also come to the conclusion that trying to keep things &amp;#8220;professional&amp;#8221; is boring and pointless.  If you can&amp;#8217;t be open an honest bastard with the whole Internet, viewable by all and archive forever, then why bother blogging?&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Take my money, please!</title>
   <link href="http://finagle.org/2010/10/take-my-money-please.html"/>
   <updated>2010-10-12T00:00:00-07:00</updated>
   <id>http://finagle.org/2010/10/take-my-money-please</id>
   <content type="html">&lt;p&gt;One of the downsides to being a good web developer is that it makes it really hard to ignore bad web developers.  Ever since I started building commercial websites with an emphasis on usability, I can&amp;#8217;t help but notice when other sites get it completely wrong.  Case in point: credit cards.  Just about every commercial site accepts credit cards, and since that is arguably the only feature that a for-profit site really needs, I would expect a little more thought would be put into it.  But instead, my online shopping experience is often stymied by developers who are apparently either too lazy or too stupid to make it easy for me to &lt;em&gt;give them my money&lt;/em&gt;.  Here are a few of the more annoying mis-features I&amp;#8217;ve run across:&lt;/p&gt;
&lt;h3&gt;Card number&lt;/h3&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;strong&gt;Wrong&lt;/strong&gt;: &amp;#8220;enter card number without spaces or punctuation&amp;#8221;&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Right&lt;/strong&gt;: strip invalid characters&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Any time you ask a customer to sacrifice their convenience for the sake of your app, things have gone horribly wrong.  But especially in this case, where stripping unwanted characters is such a trivial matter, I can&amp;#8217;t understand why any self-respecting developer would make such a blunder.  Every modern web language &amp;#8211; including Ruby, Javascript, and even &lt;span class=&quot;caps&quot;&gt;PHP&lt;/span&gt; &amp;#8211; supports regular expression substitution.  All you have to do is:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gsub!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; /[^\d]/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h3&gt;Card expiration date&lt;/h3&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;strong&gt;Wrong&lt;/strong&gt;: &amp;#8220;January&amp;#8221;, &amp;#8220;February&amp;#8221;, &amp;#8220;March&amp;#8221; etc.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Right&lt;/strong&gt;: 01, 02, 03, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is another no-brainer: the expiration date printed on my card is &lt;code&gt;03/14&lt;/code&gt; (happy Pi month!), but some sites only give a list of months &lt;em&gt;by name&lt;/em&gt;, forcing me to do the conversion in my head.  Admittedly, the math is trivial, but why make customers do more work then they have to, especially when they are trying to &lt;em&gt;give you their money&lt;/em&gt;.  It&amp;#8217;s no more difficult to populate a &lt;code&gt;select&lt;/code&gt; element with numbers instead of words (in some ways, it&amp;#8217;s actually easier), and any decent web framework should provide a function to do this for you; use it!  In Rails, it&amp;#8217;s just:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;select_month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:add_month_numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h3&gt;Card type&lt;/h3&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;strong&gt;Wrong&lt;/strong&gt;: &amp;#8220;select card type&amp;#8221;&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Right&lt;/strong&gt;: determine card type from card number&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This one involves slightly more effort, but since we&amp;#8217;re trying to make it as easy as possible for people to &lt;em&gt;give us their money&lt;/em&gt;, it&amp;#8217;s totally worth it.  The crucial piece of information here is the fact that the type of the credit card can be determined from the card number itself, using the same ubiquitous regular expressions we used above.  Here&amp;#8217;s a mapping of card numbers to (some of the) card types:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;  /^4/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;      &lt;span class=&quot;s2&quot;&gt;&amp;quot;Visa&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;  /^5[1-5]/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Mastercard&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;  /^3[47]/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&amp;quot;American Express&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;  /^6011/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;s2&quot;&gt;&amp;quot;Discover&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;h3&gt;TL;DR&lt;/h3&gt;
&lt;p&gt;Put a little extra effort into designing the payment section of your site, you want to make it as easy as possible for your customers to &lt;em&gt;give you their money&lt;/em&gt;.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Autotest and Ruby 1.9.2</title>
   <link href="http://finagle.org/2010/09/autotest-and-ruby-1-9-2.html"/>
   <updated>2010-09-04T00:00:00-07:00</updated>
   <id>http://finagle.org/2010/09/autotest-and-ruby-1-9-2</id>
   <content type="html">&lt;p&gt;There&amp;#8217;s a &lt;a href=&quot;http://rubyforge.org/tracker/index.php?func=detail&amp;amp;aid=28113&amp;amp;group_id=419&amp;amp;atid=1678&quot;&gt;bug in autotest&lt;/a&gt; that prevents it from properly finding a project&amp;#8217;s autotest discover file under Ruby 1.9.2.  Until an appropriate fix is made, you can work around it on the command line like so:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;  &lt;span class=&quot;nv&quot;&gt;$ RUBYLIB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;autotest
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Ruby Gets Possessive</title>
   <link href="http://finagle.org/2010/05/ruby-gets-possessive.html"/>
   <updated>2010-05-07T00:00:00-07:00</updated>
   <id>http://finagle.org/2010/05/ruby-gets-possessive</id>
   <content type="html">&lt;p&gt;I debated whether this code snippet was significant enough to bother blogging about, but it is useful if for no other reason that as an example of one of the great features of Ruby: the ability to reopen any class, even a standard class, and add methods.&lt;/p&gt;
&lt;p&gt;In this case, we needed a method to apply the English rules for the possessive apostrophy to a string, e.g. a person&amp;#8217;s name.  I looked-up the rules on &lt;a href=&quot;http://en.wikipedia.org/wiki/Apostrophe#Singular_nouns_ending_with_an_.E2.80.9Cs.E2.80.9D_or_.E2.80.9Cz.E2.80.9D_sound&quot;&gt;Wikipedia&lt;/a&gt; and coded up the following three-liner:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;possessive&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;s&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;%r{(s|se|z|ze|ce|x|xe)$}i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Now in my site I can do things like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Steve&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;possessive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; Profile&amp;quot;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&amp;quot;Steve&amp;#39;s Profile&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;quot;Alex&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;possessive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; Profile&amp;quot;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&amp;quot;Alex&amp;#39; Profile&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;(Cross-posted to the &lt;a href=&quot;http://conceivian.com/insights&quot;&gt;Conceivian Blog&lt;/a&gt;)&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Swinging from Tree to Tree</title>
   <link href="http://finagle.org/2010/02/swing-from-tree-to-tree.html"/>
   <updated>2010-02-27T00:00:00-08:00</updated>
   <id>http://finagle.org/2010/02/swing-from-tree-to-tree</id>
   <content type="html">&lt;p&gt;Last time I updated this blog it was the night before starting a new job, and on the eve of starting yet-another new job, I thought it would be a good time to recap.&lt;/p&gt;
&lt;h3&gt;The Old&lt;/h3&gt;
&lt;p&gt;At the beginning of the year I started work at &lt;a href=&quot;http://sponsaurus.com/&quot;&gt;Sponsaurus&lt;/a&gt;, a little sports-sponsorship management start-up working out of the &lt;a href=&quot;http://startpad.org/&quot;&gt;StartPad&lt;/a&gt; offices.  The idea was good, the people were great, and building a site from scratch using the latest-and-greatest toys was addictively fun.  Things that were &amp;#8220;20 pounds of awesome in a 10 pound bag&amp;#8221;&amp;nbsp;:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;span class=&quot;caps&quot;&gt;CEO&lt;/span&gt; &lt;a href=&quot;http://www.linkedin.com/in/bhenry&quot;&gt;Bruce P. Henry&lt;/a&gt;, and co-developer and fellow Kashless alum &lt;a href=&quot;http://www.linkedin.com/in/johnpostlethwait&quot;&gt;John Postlethwait&lt;/a&gt;.  Working with them was always great fun, and I would happily do so again anytime.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.mongodb.org/&quot;&gt;MongoDB&lt;/a&gt;, as provided by &lt;a href=&quot;http://mongohq.com&quot;&gt;MongoHQ&lt;/a&gt;, and the &lt;a href=&quot;http://railstips.org/blog/archives/2009/06/27/mongomapper-the-rad-mongo-wrapper&quot;&gt;MongoMapper&lt;/a&gt; &lt;span class=&quot;caps&quot;&gt;ODM&lt;/span&gt;.  I&amp;#8217;ve raved about Mongo before, but it was the first time I&amp;#8217;d used it in production.&lt;/li&gt;
	&lt;li&gt;The &lt;a href=&quot;http://wiki.github.com/hassox/warden/&quot;&gt;Warden&lt;/a&gt; and &lt;a href=&quot;http://github.com/plataformatec/devise&quot;&gt;Devise&lt;/a&gt; authentication framework.  It was especially useful in that it works well with Mongo, and allows user accounts to be scoped, when serving multiple virtual sites.&lt;/li&gt;
	&lt;li&gt;The &lt;a href=&quot;http://heroku.com/&quot;&gt;Heroku&lt;/a&gt; Ruby cloud-hosting service.  MongoMapper&amp;#8217;s&lt;br /&gt;
John Nunemaker puts it best in &lt;a href=&quot;http://railstips.org/blog/archives/2009/11/08/youre-an-idiot-for-not-using-heroku/&quot;&gt;You&amp;#8217;re an Idiot for Not Using Heroku&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To my great disappointment, Sponsaurus&amp;#8217; first round of funding fell-through, and they were forced to suspend development after just three weeks.  So it was back to job hunting, but with the added wrinkle of having fallen madly in love with the start-up lifestyle.  I was dreading having to take just any old code monkey job to pay the bills.&lt;/p&gt;
&lt;h3&gt;The New&lt;/h3&gt;
&lt;p&gt;It&amp;#8217;s not at all lost on me that almost all of my coding gigs have come as recommendations from friends-of-friends.  In the latest case, Bruce introduced me to &lt;a href=&quot;http://www.conceivian.com/&quot;&gt;Conceivian&lt;/a&gt;, a custom Rails shop in Redmond, and I&amp;#8217;m now their Lead Developer.  They specialize in building prototype websites for other start-up companies, which means an endless supply of green-fields coding projects to feed my start-up addiction.  It&amp;#8217;s also a small team, which means little-to-no politics (yuk).  So here goes &amp;#8230;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>JSON and the Args (or Not)</title>
   <link href="http://finagle.org/2010/01/json-and-the-args-or-not.html"/>
   <updated>2010-01-01T00:00:00-08:00</updated>
   <id>http://finagle.org/2010/01/json-and-the-args-or-not</id>
   <content type="html">&lt;p&gt;(Admittedly not my best work, but it&amp;#8217;s hard coming up with &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt; puns)&lt;/p&gt;
&lt;p&gt;Playing with &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt; Document Stores has led me down the path to a few other exciting &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt; toys.  The first is &amp;#8230;&lt;/p&gt;
&lt;h1&gt;&lt;a href=&quot;http://json-schema.org&quot;&gt;&lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt; Schema&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Just like &lt;a href=&quot;http://www.w3.org/XML/Schema&quot;&gt;&lt;span class=&quot;caps&quot;&gt;XML&lt;/span&gt; Schema&lt;/a&gt;, &lt;a href=&quot;http://json-schema.org&quot;&gt;&lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt; Schema&lt;/a&gt; allows you to specify (in &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt; form) the semantics of a particular &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt; data structure.  While in theory the schema is useful for validation, in practice validation just sucks up too much &lt;span class=&quot;caps&quot;&gt;CPU&lt;/span&gt; time to be worth the trouble.  Where things get really interesting is the possibility of automatically generating user interfaces that compose &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt;-based messages behind the scenes.  There&amp;#8217;s just one thing missing &amp;#8230;&lt;/p&gt;
&lt;h1&gt;&lt;a href=&quot;http://groups.google.com/group/json-schema/web/service-mapping-description-proposal&quot; title=&quot;SMD&quot;&gt;Service Mapping Description&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Ta-da! &lt;a href=&quot;http://groups.google.com/group/json-schema/web/service-mapping-description-proposal&quot;&gt;&lt;span class=&quot;caps&quot;&gt;SMD&lt;/span&gt;&lt;/a&gt; allows you to describe all of the methods of a web service using  &lt;a href=&quot;http://json-schema.org/&quot;&gt;&lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt; Schema&lt;/a&gt; to describe each method&amp;#8217;s parameters. It supports a variety of transports and envelopes from simple GETs or POSTs up through RESTful resources and &lt;a href=&quot;http://en.wikipedia.org/wiki/JSON-RPC&quot;&gt;&lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt;-&lt;span class=&quot;caps&quot;&gt;RPC&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The beauty of all of this is that it allows for services (web and otherwise) to advertise its functionality in user- and computer-readable ways.  It has the potential to be a generic communication mechanism between disparate bits of software (potentially controlling hardware), allowing us to virtually wire-up appliance X to service Y through user interface Z, without any of them having prior knowledge of each other.  Pretty sweet.&lt;/p&gt;
&lt;h1&gt;You Are &lt;code&gt;'Here':{}&lt;/code&gt; &amp;#8230;&lt;/h1&gt;
&lt;p&gt;One last bit of &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt; goodness: &lt;a href=&quot;http://en.wikipedia.org/wiki/GeoJSON&quot;&gt;GeoJSON&lt;/a&gt;.  As you might expect, it&amp;#8217;s a standard for representing geographic information in &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt;.  It&amp;#8217;s already the de facto standard, and supported by just about everybody.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Long Time, No Blog</title>
   <link href="http://finagle.org/2009/11/long-time-no-blog.html"/>
   <updated>2009-11-23T00:00:00-08:00</updated>
   <id>http://finagle.org/2009/11/long-time-no-blog</id>
   <content type="html">&lt;p&gt;It seems to work out that when I&amp;#8217;m most busy coding, I have the least time to blog (and vice-versa).  That&amp;#8217;s my official excuse for it being two months since my last update: work has been busy.&lt;/p&gt;
&lt;p&gt;First, at the beginning of October, me and the Kashless Krew  went to &lt;a href=&quot;http://www.alohaonrails.com/&quot;&gt;AlohaOnRails&lt;/a&gt;, my first Ruby/Rails conference in sunny (read: &amp;#8220;sweltering&amp;#8221;) O&amp;#8217;ahu, Hawai&amp;#8217;i:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2009/11/23/8824_814865316318_10700776_46239972_2328810_n.jpg&quot; width=&quot;302&quot; height=&quot;227&quot;/&gt;&lt;/p&gt;
&lt;p&gt;The conference was a lot of fun: got to hear about some neat Rails tech and meet some of the &lt;a href=&quot;http://onestepback.org/&quot;&gt;rock stars&lt;/a&gt; in the Ruby world.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve also been continuing my exploration of &lt;a href=&quot;http://en.wikipedia.org/wiki/NoSQL&quot;&gt;No-&lt;span class=&quot;caps&quot;&gt;SQL&lt;/span&gt;&lt;/a&gt; databases.  While I still love the design of &lt;a href=&quot;http://couchdb.apache.org/&quot;&gt;CouchDB&lt;/a&gt;, I&amp;#8217;ve been playing with &lt;a href=&quot;http://www.mongodb.org/&quot;&gt;MongoDB&lt;/a&gt; and &lt;a href=&quot;http://railstips.org/2009/6/27/mongomapper-the-rad-mongo-wrapper&quot;&gt;MongoMapper&lt;/a&gt;.  Mongo is a bit more mature, even if it does still have a whiff of the &lt;span class=&quot;caps&quot;&gt;SQL&lt;/span&gt; smell about it.  I&amp;#8217;ll have more Useful Information about that later.&lt;/p&gt;
&lt;p&gt;The other thing I&amp;#8217;ve been learning is the &lt;a href=&quot;http://rspec.info/&quot;&gt;RSpec&lt;/a&gt; testing framework.  When I first looked into it a few years back, I found the RSpec syntax unwieldy compared with Test::Unit.  But after having to do various hacky things to make Shoulda run decently (e.g. &lt;a href=&quot;http://github.com/lifo/fast_context&quot;&gt;fast_context&lt;/a&gt;) and even contemplating writing my own framework (the now defunct &lt;a href=&quot;http://github.com/CodeMonkeySteve/mustard&quot;&gt;Mustard&lt;/a&gt;), I&amp;#8217;ve come to appreciate the RSpec Way and can&amp;#8217;t see myself ever going back.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Safe Mailing with mail_safe</title>
   <link href="http://finagle.org/2009/09/safe-mailing-with-safe_mail.html"/>
   <updated>2009-09-21T00:00:00-07:00</updated>
   <id>http://finagle.org/2009/09/safe-mailing-with-safe_mail</id>
   <content type="html">&lt;p&gt;Working on a production website can be a bit nerve-wracking, especially when it comes to testing features that send email as a side effect: one little bug could wind up spamming all of your precious users.  Of course, Rails has the basic safety feature of simply disabling mail delivery in certain environments (i.e. test and development), but that&amp;#8217;s no good because sometimes you do want to test that mail is actually delivered, just without having to worry that it&amp;#8217;s delivered to live users.&lt;/p&gt;
&lt;p&gt;Enter &lt;a href=&quot;http://github.com/myronmarston/mail_safe&quot;&gt;mail_safe&lt;/a&gt;, a handy little gem written by my co-worker Myron.  Instead of disabling mail delivery environment-wide, mail_safe allows you to define one or more domains for which mail should be delivered, and a catch-all address for those that shouldn&amp;#8217;t.  This allows for testing with a real account (if it&amp;#8217;s in the appropriate domain), while still keeping you secure against unintentional spam.&lt;/p&gt;
&lt;p&gt;Once you&amp;#8217;ve started using it, you&amp;#8217;ll wonder how you ever slept soundly without it.  It&amp;#8217;s the sort of thing that should probably be included in the Rails core (&lt;span class=&quot;caps&quot;&gt;IMNSHO&lt;/span&gt;).&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>String Conversions in Ruby</title>
   <link href="http://finagle.org/2009/09/string-conversions-in-ruby.html"/>
   <updated>2009-09-17T00:00:00-07:00</updated>
   <id>http://finagle.org/2009/09/string-conversions-in-ruby</id>
   <content type="html">&lt;p&gt;Here&amp;#8217;s a tip so simple and elegant it&amp;#8217;s amazing I ever got along without it.  Consider &lt;code&gt;String#to_f&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;irb&quot;&gt;&lt;span class=&quot;go&quot;&gt;--&amp;gt; &amp;#39;12.34&amp;#39;.to_f&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;==&amp;gt; 12.34&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Which works great, so long as the string is a valid number, but if not:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;irb&quot;&gt;&lt;span class=&quot;go&quot;&gt;--&amp;gt; &amp;#39;splat&amp;#39;.to_f&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;==&amp;gt; 0.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;#to_f&lt;/code&gt; doesn&amp;#8217;t throw an exception with invalid input, making it dangerous to use with any user-supplied data.  I&amp;#8217;ve seen various solutions that involve regular expressions, but these are kludgy and don&amp;#8217;t handle all proper numeric representations.&lt;/p&gt;
&lt;p&gt;Fortunately, Ruby provides type-cast-style methods to do proper conversions with validation:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;irb&quot;&gt;&lt;span class=&quot;go&quot;&gt;--&amp;gt; Float(&amp;#39;12.34&amp;#39;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;==&amp;gt; 12.34&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;--&amp;gt; Float(&amp;#39;splat&amp;#39;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;ArgumentError: invalid value for Float(): &amp;quot;splat&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;It might look weird, until you realize that &lt;code&gt;Float&lt;/code&gt; is both a class (&lt;code&gt;::Float&lt;/code&gt;) and a kernel method (&lt;code&gt;Kernel.Float&lt;/code&gt;).  There are also methods for converting to an &lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;Array&lt;/code&gt;, or even back to a &lt;code&gt;String&lt;/code&gt; (which is essentially just &lt;code&gt;#to_s&lt;/code&gt;).&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>I Hate Shoulda (But I Blame Test::Unit)</title>
   <link href="http://finagle.org/2009/07/i-hate-shoulda-but-i-blame-test-unit.html"/>
   <updated>2009-07-27T00:00:00-07:00</updated>
   <id>http://finagle.org/2009/07/i-hate-shoulda-but-i-blame-test-unit</id>
   <content type="html">&lt;p&gt;I hate Shoulda.&lt;/p&gt;
&lt;p&gt;But I blame Test::Unit.&lt;/p&gt;
&lt;p&gt;Because Test::Unit can&amp;#8217;t scale.&lt;/p&gt;
&lt;p&gt;There, I&amp;#8217;ve said it. It wasn&amp;#8217;t easy, I drank the &lt;a href=&quot;http://en.wikipedia.org/wiki/Test-driven_development&quot;&gt;&lt;span class=&quot;caps&quot;&gt;TDD&lt;/span&gt;&lt;/a&gt; Cool-Aid a long time ago, and never looked back.  But the fact of the matter is that &lt;a href=&quot;http://ruby-doc.org/stdlib/libdoc/test/unit/rdoc/classes/Test/Unit.html&quot;&gt;Test::Unit&lt;/a&gt; is rotten from the very core, and it makes the seductive &lt;a href=&quot;http://thoughtbot.com/projects/shoulda&quot;&gt;Shoulda&lt;/a&gt; features nothing but bitter lies.  Let me demonstrate:&lt;/p&gt;
&lt;h2&gt;Hopeful Optimism&lt;/h2&gt;
&lt;p&gt;Take a sufficiently-contrived test, where you create some object and verify some of its properties:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;test/unit&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;shoulda&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Numeric&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;even?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zero?&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;odd?&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonzero?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OddNumberTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TestCase&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;an odd number&amp;#39;&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# create object&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;97&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;be true&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;  &lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;be odd&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;  &lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;odd?&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;not be even&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;even?&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Now, someone naive in the ways of Test::Unit, might expect this test to take approximately &lt;em&gt;one second&lt;/em&gt; to execute, right?  After all, it&amp;#8217;s only the object creation that takes any time (in these examples, the &lt;code&gt;sleep 1&lt;/code&gt; represents some non-trivial database or network operation).  So we run it, and &amp;#8230;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby -rubygems ./why_shoulda_sucks.rb
Loaded suite why_shoulda_sucks
Started
...
Finished in 3.006617 seconds.
3 tests, 3 assertions, 0 failures, 0 errors
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;&amp;#8220;&lt;strong&gt;Three seconds&lt;/strong&gt;?  Why did it take so long?!&amp;#8221;, our poor naive tester cries.  Because, expecting Shoulda to act like a Domain-Specific Language (as all Right-Thinking Rubyists would), he doesn&amp;#8217;t realize that under the covers it&amp;#8217;s just creating three different Test::Unit tests.  So what&amp;#8217;s so bad about Test::Unit?&lt;/p&gt;
&lt;h2&gt;A Sense of Dread&lt;/h2&gt;
&lt;p&gt;What&amp;#8217;s so bad about Test::Unit is that it makes the following assumptions:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Each test may be run in any order, not the order define (in fact, it&amp;#8217;s in sorted order by test name)&lt;/li&gt;
	&lt;li&gt;Each test may modify the state at any time, not just in the &lt;code&gt;setup&lt;/code&gt; function&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Therefore, the &lt;code&gt;setup&lt;/code&gt; (and &lt;code&gt;teardown&lt;/code&gt;) functions must be called &lt;strong&gt;for every test&lt;/strong&gt;, whether they really need it or not.&lt;/p&gt;
&lt;p&gt;So instead of:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;setup&lt;/li&gt;
	&lt;li&gt;should be true&lt;/li&gt;
	&lt;li&gt;should be odd&lt;/li&gt;
	&lt;li&gt;should not be even&lt;/li&gt;
	&lt;li&gt;(teardown)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We get:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;setup&lt;/li&gt;
	&lt;li&gt;should be true&lt;/li&gt;
	&lt;li&gt;(teardown)&lt;/li&gt;
	&lt;li&gt;(setup)&lt;/li&gt;
	&lt;li&gt;should be odd&lt;/li&gt;
	&lt;li&gt;(teardown)&lt;/li&gt;
	&lt;li&gt;(setup)&lt;/li&gt;
	&lt;li&gt;should not be even&lt;/li&gt;
	&lt;li&gt;(teardown)&lt;/li&gt;
	&lt;li&gt;(setup)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That&amp;#8217;s a lot of extraneous setting-up and tearing-down, and since those are the parts that actually do stuff (as opposed to the assertions themselves), that&amp;#8217;s the slowest part of the test.&lt;/p&gt;
&lt;h2&gt;Crushing Disappointment&lt;/h2&gt;
&lt;p&gt;The greatest features in Shoulda (as opposed to, say, &lt;a href=&quot;http://rspec.info/&quot;&gt;RSpec&lt;/a&gt;) is the ability to use &lt;em&gt;nested contexts&lt;/em&gt;.  This lets us do sub-tests that inherit their parent context&amp;#8217;s state, but roll-back their own changes.  So let&amp;#8217;s add one:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OddNumberTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TestCase&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;an odd number&amp;#39;&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# create object&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;97&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;be true&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;  &lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;be odd&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;  &lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;odd?&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;not be even&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;even?&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;add one&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# modify object&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;be true&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;  &lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;be even&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;  &lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;even?&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;not be odd&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;odd?&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;still be odd&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;odd?&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Again, on first glance you might expect this test to take &lt;em&gt;two seconds&lt;/em&gt;, but actually:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby -rubygems ./why_shoulda_sucks.rb
Loaded suite why_shoulda_sucks
Started
.......
Finished in 10.014666 seconds.
7 tests, 7 assertions, 0 failures, 0 errors
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Ten seconds&lt;/strong&gt;, over &lt;strong&gt;five times&lt;/strong&gt; what it really should be if Test::Unit was just smart enough execute the tests in the order given, and perform the &lt;code&gt;setup&lt;/code&gt; and &lt;code&gt;teardown&lt;/code&gt; appropriately.&lt;/p&gt;
&lt;h2&gt;The Test::Unit &lt;a href=&quot;http://en.wikipedia.org/wiki/Fail_whale&quot;&gt;Fail Whale&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;And that&amp;#8217;s just with one level of nesting.  If we try an even slight-complicated test, with several contexts nested even only a few deep:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OddNumberTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TestCase&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;an odd number&amp;#39;&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# create object&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;97&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;be true&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;  &lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;be odd&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;  &lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;odd?&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;not be even&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;even?&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;add one&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# modify object&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;be true&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;  &lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;be even&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;  &lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;even?&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;not be odd&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;odd?&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;subtract one&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;# modify object&lt;/span&gt;
          &lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;be true&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;  &lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;be odd&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;  &lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;odd?&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;not be even&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;even?&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;still be odd&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;odd?&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;multiply by two&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# modify object&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;be true&amp;#39;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;  &lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;be even&amp;#39;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;  &lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;even?&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;not be odd&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;odd?&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;even still be odd&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;odd?&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Can you say &amp;#8220;exponential growth&amp;#8221;?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby -rubygems ./why_shoulda_sucks.rb
Loaded suite why_shoulda_sucks
Started
.......
Finished in 26.048316 seconds.
14 tests, 14 assertions, 0 failures, 0 errors
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;26 seconds&lt;/strong&gt;, that&amp;#8217;s &lt;strong&gt;six times&lt;/strong&gt; longer than it should take.&lt;/p&gt;
&lt;h2&gt;You Think That&amp;#8217;s Bad?&lt;/h2&gt;
&lt;p&gt;Now that I&amp;#8217;m working at a Real Ruby Shop, I&amp;#8217;ve gotten to experience the joy of having thousands of tests to make sure I haven&amp;#8217;t done something stupid.  But I also get to experience the pain of running all these tests under this profoundly inefficient framework:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rake &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;:units &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;:functionals &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;:integration
Finished in 1042.379506 seconds.
2141 tests, 4576 assertions, 0 failures, 0 errors

Finished in 578.284529 seconds.
613 tests, 896 assertions, 0 failures, 0 errors

Finished in 34.538012 seconds.
22 tests, 65 assertions, 0 failures, 0 errors
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Almost &lt;strong&gt;half an hour&lt;/strong&gt; on a decent system, &lt;strong&gt;over 50 minutes&lt;/strong&gt; on our Continuous Integration server.  That&amp;#8217;s an awful lot of waiting.&lt;/p&gt;
&lt;h2&gt;Screw You Guys, I&amp;#8217;m Going Home&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://rubyrags.com/products/10&quot;&gt;Fork You&lt;/a&gt; then, I&amp;#8217;ll make my own testing framework that keeps track of dependencies and instantiates them in the most efficient way (&lt;a href=&quot;http://www.mahalo.com/bender-quotes&quot;&gt;and blackjack, and hookers!&lt;/a&gt;) .  And while I&amp;#8217;m at it:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&amp;#8220;Should&amp;#8221; is &lt;a href=&quot;http://www.faqs.org/rfcs/rfc2119.html&quot;&gt;not the correct word&lt;/a&gt; .  &amp;#8220;Must&amp;#8221; is the correct word (plus, less typing).&lt;/li&gt;
	&lt;li&gt;If a test fails, it should not run any other tests in that context.  They&amp;#8217;ll almost certainly also fail and unhelpfully spam you with error messages.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.faqs.org/rfcs/rfc2119.html&quot;&gt;Autotest&lt;/a&gt; should be baked right in, so that if a subset of the tests fail, I should be able to re-run just the failing tests, which will in turn only instantiate the necessary prerequisites, and in the most efficient order.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So far I have a proof-of-concept project on GitHub called &lt;a href=&quot;http://github.com/CodeMonkeySteve/mustard&quot;&gt;Mustard&lt;/a&gt; .  I&amp;#8217;m going to start migrating my other projects to it from Shoulda and will write more on the subject later.  Watch this space &amp;#8230;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>All Your (Data)Base ...</title>
   <link href="http://finagle.org/2009/06/all-your-data-base.html"/>
   <updated>2009-06-16T00:00:00-07:00</updated>
   <id>http://finagle.org/2009/06/all-your-data-base</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/greenem/11696663/&quot;&gt;&lt;img src=&quot;/assets/2009/6/16/network-graph.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After failing to make &lt;a href=&quot;http://couchdb.apache.org/&quot;&gt;CouchDB&lt;/a&gt; doing anything useful, and being completely unwilling to go back to &lt;a href=&quot;http://en.wikipedia.org/wiki/Sql&quot;&gt;1974&lt;/a&gt; I decided to go back and revisit my assumptions.  Both of my current home projects are essentially attempts to treat real-world interactions as &lt;a href=&quot;http://en.wikipedia.org/wiki/Routing&quot;&gt;Routing Problems&lt;/a&gt;, but after doing some research, I decided that was one wheel I didn&amp;#8217;t even want to attempt to reinvent (graph theory is not my specialty).&lt;/p&gt;
&lt;p&gt;Somewhere along the way, I discovered what I really needed was a &lt;em&gt;Graph Database&lt;/em&gt;.  That led me to apparently the only significant implementation: &lt;a href=&quot;http://neo4j.org/&quot;&gt;Neo4j&lt;/a&gt;, an embedded Java graph database. But I&amp;#8217;d rather juggle flaming porcupines than touch Java again &amp;#8230; and thanks to &lt;a href=&quot;http://en.wikipedia.org/wiki/Jruby&quot;&gt;JRuby&lt;/a&gt; and the &lt;a href=&quot;http://github.com/andreasronge/neo4j&quot;&gt;neo4j gem&lt;/a&gt;, I don&amp;#8217;t have to!  Yay!&lt;/p&gt;
&lt;p&gt;So if your problem domain is graph-like, you should definitely checkout &lt;a href=&quot;http://github.com/andreasronge/neo4j&quot;&gt;neo4j&lt;/a&gt;, it&amp;#8217;s looking like a seriously sweet storage solution.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Couch Trouble</title>
   <link href="http://finagle.org/2009/05/couch-trouble.html"/>
   <updated>2009-05-26T00:00:00-07:00</updated>
   <id>http://finagle.org/2009/05/couch-trouble</id>
   <content type="html">&lt;p&gt;I&amp;#8217;ve been wrangling with CouchDB for a few weeks now, and it&amp;#8217;s starting to feel a bit like this:&lt;/p&gt;
&lt;p&gt;&lt;object width=&quot;425&quot; height=&quot;344&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://www.youtube.com/v/vSTJL1ikxXY&amp;hl=en&amp;fs=1&quot;&gt;&lt;/param&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot;&gt;&lt;/param&gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot;&gt;&lt;/param&gt;&lt;embed src=&quot;http://www.youtube.com/v/vSTJL1ikxXY&amp;hl=en&amp;fs=1&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; width=&quot;425&quot; height=&quot;344&quot;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/p&gt;
&lt;p&gt;(Ooh, my first embedded video.  Feel the Web 2.0 Awesome-ness-age-ality).&lt;/p&gt;
&lt;p&gt;First, let me say that I can&amp;#8217;t really blame CouchDB for any of my troubles, which are essentially:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;There are a excess of Ruby/Rails gems for accessing CouchDB, all of whom have different dependencies and do things in slightly different ways.  I&amp;#8217;m sure that eventually a consensus will emerge on the best Ruby/CouchDB way of doing things, but it hasn&amp;#8217;t happened yet.&lt;/li&gt;
	&lt;li&gt;CouchDB is not yet 1.0, so the design can support &lt;a href=&quot;http://couchdb.apache.org/docs/overview.html&quot;&gt;lots of spiffy features&lt;/a&gt; that &lt;em&gt;don&amp;#8217;t actually exist yet&lt;/em&gt;.  Specifically, the lack of partial replication stalled my attempts at using Couch for a distributed media server project.&lt;/li&gt;
	&lt;li&gt;CouchDB doesn&amp;#8217;t work perfectly for absolutely everything (whoda thunkit?).  My other big project (more on that later) isn&amp;#8217;t really Document-Oriented, no matter how much I try to beat it flat.  I&amp;#8217;m now thinking Git is actually be best storage solution, and if you understand Gits internals well enough, you&amp;#8217;ll see how mind-warping that concept is.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So I think I&amp;#8217;ll put CouchDB down for a while, at least until 1.0, or until I run across a project where it&amp;#8217;s appropriate.  Of course, it&amp;#8217;s still a gazillion times better than any &lt;span class=&quot;caps&quot;&gt;RDBMS&lt;/span&gt; &amp;#8230;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>CouchDB Testing Tip</title>
   <link href="http://finagle.org/2009/05/couchdb-testing-tip.html"/>
   <updated>2009-05-13T00:00:00-07:00</updated>
   <id>http://finagle.org/2009/05/couchdb-testing-tip</id>
   <content type="html">&lt;p&gt;Finished my first stab at converting my current toy project from ActiveRecord to CouchDB, and so far so good.  I ran into an issue where associations aren&amp;#8217;t getting saved, but I&amp;#8217;m most likely just doing something stupid.&lt;/p&gt;
&lt;p&gt;One minor annoyance is that, unlike ActiveRecord, the test database doesn&amp;#8217;t get purged and after a while can get cluttered with randomly-generated fixtures&lt;sup class=&quot;footnote&quot; id=&quot;fnr1&quot;&gt;&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.  No problem, just drop in this little Rake task to recreate the DB on each run:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# lib/tasks/couchdb.rake&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RAILS_ROOT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/config/environment&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;couch_potato&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;couchdb:test:purge&amp;#39;&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;CouchPotato&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;database_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;YAML&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/config/couchdb.yml&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;CouchPotato&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;couchrest_database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recreate!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;db:test:purge&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;couchdb:test:purge&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p class=&quot;footnote&quot; id=&quot;fn1&quot;&gt;&lt;a href=&quot;#fnr1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; &lt;span class=&quot;caps&quot;&gt;BTW&lt;/span&gt;, have I mentioned how cool &lt;a href=&quot;http://github.com/thoughtbot/factory_girl&quot;&gt;factory_girl&lt;/a&gt; is?  Another new tool for my bag of tricks.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>CouchDB: Frankie Says Relax</title>
   <link href="http://finagle.org/2009/05/couchdb-frankie-says-relax.html"/>
   <updated>2009-05-12T00:00:00-07:00</updated>
   <id>http://finagle.org/2009/05/couchdb-frankie-says-relax</id>
   <content type="html">&lt;p&gt;I&amp;#8217;m falling in love (or at least lust) with &lt;a href=&quot;http://couchdb.apache.org/&quot;&gt;CouchDB&lt;/a&gt;, especially after seeing this &lt;a href=&quot;http://aac2009.confreaks.com/07-feb-2009-16-00-relaxing-with-couchdb-will-leinweber.html&quot;&gt;presentation at &lt;span class=&quot;caps&quot;&gt;AAC&lt;/span&gt;&lt;/a&gt; and this &lt;a href=&quot;http://barkingiguana.com/2008/08/30/jan-lehnardt-talks-to-the-bbc-about-couchdb&quot;&gt;presentation for the &lt;span class=&quot;caps&quot;&gt;BBC&lt;/span&gt;&lt;/a&gt;.  My summary: &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt; document storage, sliced-and-diced with Javascript &lt;a href=&quot;http://en.wikipedia.org/wiki/Map_reduce&quot;&gt;MapReduce&lt;/a&gt;, all served on a RESTful platter.&lt;/p&gt;
&lt;p&gt;As a long-time &lt;span class=&quot;caps&quot;&gt;XML&lt;/span&gt; fanboy, the lack of schema in &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt; makes me a bit twitchy, and using Javascript as a query language just looks a lttle wrong.  But I see the advantages to the document-centric model (versioning, replication, access control) and MapReduce is definitely the Wave of the &lt;del&gt;Future&lt;/del&gt; Present.  It looks like you can encapsulate all of your model logic in views, so I&amp;#8217;m not sure if an explicit schema is really even necessary.  The more I learn about &lt;a href=&quot;http://upstream-berlin.com/2009/03/31/the-case-of-activerecord-vs-couchdb/&quot;&gt;That Way of doing things&lt;/a&gt;, the more it grows on me.&lt;/p&gt;
&lt;p&gt;So how do we make CouchDB play nicely with Rails?  I first tried &lt;a href=&quot;http://github.com/arunthampi/activecouch&quot;&gt;activecouch&lt;/a&gt;, but found its lack of Ruby-type casts and one-database-per-model scheme irritating.  &lt;a href=&quot;http://github.com/langalex/couch_potato&quot;&gt;couch_potato&lt;/a&gt; definitely looks slicker, but there seems to be quite a few  &lt;a href=&quot;http://github.com/search?type=Repositories&amp;amp;language=rb&amp;amp;q=couchdb&quot;&gt;other CouchDB interfaces&lt;/a&gt; out there that might be just as good or better.  I see this as a good sign that many others also see CouchDB&amp;#8217;s potential, and are experimenting with ways to deal with it in a Ruby Way.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Word of the Day: Connascence</title>
   <link href="http://finagle.org/2009/05/word-of-the-day.html"/>
   <updated>2009-05-05T00:00:00-07:00</updated>
   <id>http://finagle.org/2009/05/word-of-the-day</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://www.thefreedictionary.com/Connascence&quot;&gt;Connascence&lt;/a&gt;&lt;br /&gt;
&lt;blockquote&gt;&lt;br /&gt;
Con-nas-cence&lt;br /&gt;
n.	1.	The common birth of two or more at the same time; production of two or more together.&lt;br /&gt;
	2.	That which is born or produced with another.&lt;br /&gt;
	3.	The act of growing together.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;From Jim Weirich&amp;#8217;s intriguing &lt;a href=&quot;http://aac2009.confreaks.com/&quot;&gt;acts_as_conference&lt;/a&gt; presentation on &lt;a href=&quot;http://aac2009.confreaks.com/06-feb-2009-11-00-the-grand-unified-theory-jim-weirich.html&quot;&gt;The Grand Unified Theory of Software Development&lt;/a&gt; .&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Seattle.rb and GoRuCo Wisdom</title>
   <link href="http://finagle.org/2009/04/seattle-rb-and-goruco-wisdom.html"/>
   <updated>2009-04-29T00:00:00-07:00</updated>
   <id>http://finagle.org/2009/04/seattle-rb-and-goruco-wisdom</id>
   <content type="html">&lt;p&gt;Finally got around to attending the &lt;a href=&quot;http://www.seattlerb.org/&quot;&gt;Seattle Ruby Brigade&lt;/a&gt; last night, although I feel a bit silly about forgetting to bring my laptop to &amp;#8220;Hack Night&amp;#8221;.  Still, I had interesting conversations with &lt;a href=&quot;http://rwldesign.com/&quot;&gt;Ryan Lonac&lt;/a&gt; about all things Ruby, with someone (a Jennifer) who could actually make use of MP3 validation if I added it to &lt;a href=&quot;http://github.com/CodeMonkeySteve/assert_valid_content&quot;&gt;assert_valid_content&lt;/a&gt;, and with a couple of other cool people who&amp;#8217;s names my brain was too feeble to retain.&lt;/p&gt;
&lt;p&gt;Still working my way through the &lt;a href=&quot;http://podcast.rubyonrails.org/&quot;&gt;Ruby on Rails Podcast&lt;/a&gt; (up up to 2009 already!).  It doesn&amp;#8217;t help that I found the &lt;a href=&quot;http://railsenvy.com/&quot;&gt;Rails Envy Podcast&lt;/a&gt;, which is another interesting time-sink.  Along the way I also discovered &lt;a href=&quot;http://goruco2008.confreaks.com/index.html&quot;&gt;video from GoRuCo 2008&lt;/a&gt; and found the presentation from &amp;quot;Giles Bowkett &amp;quot;:http://goruco2008.confreaks.com/02_bowkett.html equal parts brilliant and hilarious.&lt;/p&gt;
&lt;p&gt;Finally, I&amp;#8217;ve refactored my resume to show of my Mad Ruby Skillz a bit more.  If anyone out there knows anyone out there who&amp;#8217;s looking for a Serious Ruby/Rails Geek, please pass it along and have them drop me a line.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Word of the Day: Duck-punching</title>
   <link href="http://finagle.org/2009/04/word-of-the-day.html"/>
   <updated>2009-04-28T00:00:00-07:00</updated>
   <id>http://finagle.org/2009/04/word-of-the-day</id>
   <content type="html">&lt;p&gt;I may be showing how out of date I am with the Rubyverse, but I just discovered &lt;a href=&quot;http://en.wikipedia.org/wiki/Duck_punching&quot;&gt;Duck Punching&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;Well, I was just totally sold by Adam, the idea being that if it walks like a duck and talks like a duck, itâ€™s a duck, right? So if this duck is not giving you the noise that you want, youâ€™ve got to just punch that duck until it returns what you expect.&lt;br /&gt;
â€“ Patrick Ewing&lt;/blockquote&gt;
&lt;p&gt;Awesome.&lt;/p&gt;
&lt;p&gt;As for &lt;a href=&quot;http://pratalife.blogspot.com/2008/08/show-whale.html&quot;&gt;show the whale&lt;/a&gt;: meh.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Ruby or Bust!</title>
   <link href="http://finagle.org/2009/04/ruby-or-bust.html"/>
   <updated>2009-04-24T00:00:00-07:00</updated>
   <id>http://finagle.org/2009/04/ruby-or-bust</id>
   <content type="html">&lt;p&gt;&amp;#8230; or, er, Something Else!&lt;/p&gt;
&lt;p&gt;If you haven&amp;#8217;t noticed the trend, the fact that I&amp;#8217;m updating this blog means I&amp;#8217;m once again between jobs.  I&amp;#8217;ve decided that I&amp;#8217;m getting sick of C/C++, and really need a daily dose of sweet, sweet Ruby Goodness.  To that end, I&amp;#8217;m on the hunt for what will probably end up being a Rails gig, preferably closer to home than downtown Seattle.&lt;/p&gt;
&lt;p&gt;So in between job googling, I&amp;#8217;m polishing my Rails skills a little and catching up on (two years of) the &lt;a href=&quot;http://podcast.rubyonrails.org/&quot;&gt;Ruby on Rails Podcast&lt;/a&gt; .&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Happy Independence Day!</title>
   <link href="http://finagle.org/2008/07/happy-independence-day.html"/>
   <updated>2008-07-02T00:00:00-07:00</updated>
   <id>http://finagle.org/2008/07/happy-independence-day</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;i&gt;&amp;#8220;The second day of July, 1776, will be the most memorable epoch in the history of America. I am apt to believe that it will be celebrated by succeeding generations as the great anniversary festival.&amp;#8221;&lt;br /&gt;
&amp;#8212; John Adams&lt;br /&gt;
&lt;/i&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Lee_Resolution&quot;&gt;Thanks, guys.&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Monkey Toy</title>
   <link href="http://finagle.org/2008/05/monkey-toy.html"/>
   <updated>2008-05-26T00:00:00-07:00</updated>
   <id>http://finagle.org/2008/05/monkey-toy</id>
   <content type="html">&lt;p&gt;I have recently become the proud owner of a &lt;a href=&quot;http://en.wikipedia.org/wiki/Nokia_N810&quot;&gt;Nokia 810 Internet Tablet&lt;/a&gt;, and it is truly a sweet bit o&amp;#8217; hardware.  It&amp;#8217;s essentially a pocket computer, with (almost) all of the features of a laptop PC (yes, it runs Linux).  In fact, &lt;span class=&quot;caps&quot;&gt;SWMBO&lt;/span&gt; (who&amp;#8217;s had one for quite a while) has been running &lt;span class=&quot;caps&quot;&gt;KDE&lt;/span&gt; on it. I suspect one factor in my acquiring it is the increased chance of customer bug fixes for her (not that there&amp;#8217;s anything wrong with that!).&lt;/p&gt;
&lt;p&gt;So, as much as I like Qt, I haven&amp;#8217;t yet bothered installing &lt;span class=&quot;caps&quot;&gt;KDE&lt;/span&gt;, and instead have been looking into setting up the &lt;a href=&quot;http://scratchbox.org/documentation/user/scratchbox-1.0/&quot;&gt;cross-compiling environment&lt;/a&gt;&lt;br /&gt;
 for &lt;a href=&quot;http://maemo.org/development/documentation/tutorials/maemo_4-0_tutorial.html&quot;&gt;Maemo&lt;/a&gt;, the built-in desktop.  Once I can get Hello World running, I can look into fixing &lt;span class=&quot;caps&quot;&gt;DPMI&lt;/span&gt; &amp;#8230; ;)&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Git is Awsome</title>
   <link href="http://finagle.org/2008/05/git-is-awsome.html"/>
   <updated>2008-05-26T00:00:00-07:00</updated>
   <id>http://finagle.org/2008/05/git-is-awsome</id>
   <content type="html">&lt;p&gt;I&amp;#8217;ve spent the past month or so learning the ins and outs of &lt;a href=&quot;http://git.or.cz/&quot;&gt;Git&lt;/a&gt;, and am in the process of converting from Subversion, both at work and for my personal projects.  Others &lt;a href=&quot;http://tomayko.com/writings/the-thing-about-git&quot;&gt;have written&lt;/a&gt; about &lt;a href=&quot;http://blog.madism.org/index.php/2007/09/09/138-git-awsome-ness-git-rebase-interactive&quot;&gt;Git&amp;#8217;s awesomeness&lt;/a&gt;, and there are various of &lt;a href=&quot;http://git.or.cz/gitwiki/GitSvnComparsion&quot;&gt;comparisons with Subversion&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, I think that comparing Git with Subversion as Version Control Systems is entirely missing the point:  Git is a Source Code Management tool, although it can also be used for version control.  The point of GIt is not to track the various versions of a project, but a connected series of &lt;em&gt;individual changes&lt;/em&gt; made by individual developers.  The change- and developer-centric view also makes for meaningful collaboration, instead of restricting access to a central Subversion server.&lt;/p&gt;
&lt;p&gt;It is, undoubtedly, the New Hotness, and every coder should use it (or some other real &lt;span class=&quot;caps&quot;&gt;SCM&lt;/span&gt; tool).&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Safety Feature</title>
   <link href="http://finagle.org/2008/05/safety-feature.html"/>
   <updated>2008-05-11T00:00:00-07:00</updated>
   <id>http://finagle.org/2008/05/safety-feature</id>
   <content type="html">&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;mathn&amp;#39;&lt;/span&gt;
&lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Enter an 11 digit prime number to continue:&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$stdin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chomp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_i&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prime_division&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Not Dead Yet</title>
   <link href="http://finagle.org/2007/10/not-dead-yet.html"/>
   <updated>2007-10-28T00:00:00-07:00</updated>
   <id>http://finagle.org/2007/10/not-dead-yet</id>
   <content type="html">&lt;p&gt;I haven&amp;#8217;t updated this blog in an embarrassingly long  time, but I can put the blame on Typo and/or DreamHost: posting an article would consistently and silently fail.  Meh.&lt;/p&gt;
&lt;p&gt;So I&amp;#8217;m experimenting with &lt;a href=&quot;http://mephistoblog.com/&quot;&gt;Mephisto&lt;/a&gt; instead, and while it doesn&amp;#8217;t seem to some of the nice sidebar features, it does at least work, and was fairly easy to setup.  Hopefully now I&amp;#8217;ll actually be able to get some content up here.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Back on Rails</title>
   <link href="http://finagle.org/2007/03/back-on-rails.html"/>
   <updated>2007-03-01T00:00:00-08:00</updated>
   <id>http://finagle.org/2007/03/back-on-rails</id>
   <content type="html">&lt;p&gt;As of today, I&amp;#8217;ve been with &lt;a href=&quot;http://vigilos.com&quot;&gt;Vigilos, Inc.&lt;/a&gt; for exactly four months, a fact I was reminded of when the password expiration policy kicked in and I had to track down the admin to reset it.  While my days have been spent slogging through old crappy C code (and replacing it with shiny new C++ code), I been spend&lt;br /&gt;
ing evenings and weekends getting reacquainted with Ruby on Rails.  This has been inspired in large part by the Second Edition of &lt;a href=&quot;http://www.amazon.com/gp/amabot/?pf_rd_url=%2Fgp%2Fproduct%2F0974514055%2Fref%3Dpd_cp_b_title%2F102-6241858-0226508&amp;amp;pf_rd_p=252362401&amp;amp;pf_rd_s=center-41&amp;amp;pf_rd_t=201&amp;amp;pf_rd_i=0977616630&amp;amp;pf_rd_m=ATVPDKIKX0DER&amp;amp;pf_rd_r=00B19H2M1TJWAHKNJJ56&quot;&gt;Agile Web Development with Rails&lt;/a&gt;, an excellent book, both as tutorial and reference, and I highly recommend it to anyone doing Rails development.&lt;/p&gt;
&lt;p&gt;After perusing the book cover-to-cover on my daily bus commute, I decided it was time to go back and rewrite my nominal web site (&lt;a href=&quot;http://finagle.org&quot;&gt;finagle.org&lt;/a&gt;).  This was my first Rails project, back when Rails was only up to version &lt;em&gt;0.10&lt;/em&gt;, and had quite a bit of cruft due to the ancient version (lots of stuff has changed since then) and my own lack of Ruby/Rails experience. Starting from scratch, following the book closely, and salvaging chunks of code from the original version, produced a much smaller and cleaner implementation.&lt;/p&gt;
&lt;p&gt;Along the way, I also learned some new an interesting Rails development tricks.  I&amp;#8217;ve been using &lt;a href=&quot;http://www.radrails.org/&quot;&gt;RadRails&lt;/a&gt; on my PowerBook laptop (&lt;em&gt;sooo&lt;/em&gt; much more responsive than running KDevelop over X11), which is a nice little &lt;span class=&quot;caps&quot;&gt;IDE&lt;/span&gt;.  My only gripe is that it doesn&amp;#8217;t support &lt;a href=&quot;http://www.zenspider.com/ZSS/Products/ZenTest/&quot;&gt;autotest&lt;/a&gt;, but it&amp;#8217;s easy enough to run that in a shell.  I&amp;#8217;ve also been using some rather spiffy plugins, some new some old:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://svn.toolbocks.com/plugins/manage_fixtures&quot;&gt;manage_fixtures&lt;/a&gt; allows for easy export/import of &lt;span class=&quot;caps&quot;&gt;YAML&lt;/span&gt; fixtures to/from the data base,&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;svn://errtheblog.com/svn/plugins/acts_as_textiled&quot;&gt;acts_as_textiled&lt;/a&gt; handles converting models&amp;#8217; Textile markup into &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt;,&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.realityforge.org/svn/public/code/assert-valid-asset/trunk&quot;&gt;assert-valid-asset&lt;/a&gt; is a great tool for automagically validating &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; and &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt;.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;svn://rubyforge.org/var/svn/backgroundrb&quot;&gt;backgroundrb&lt;/a&gt; provides facilities for executing long-running (or persistant) processes, and tying them into Rails.&lt;/li&gt;
	&lt;li&gt;Finally, I&amp;#8217;m using the &lt;a href=&quot;http://svn.eastmedia.com/svn/bantay/plugins/open_id_consumer&quot;&gt;open_id_consumer&lt;/a&gt; plugin to handle logins via &lt;a href=&quot;http://openid.net/&quot;&gt;OpenID&lt;/a&gt;.  Username/password is &lt;em&gt;so&lt;/em&gt; Web 1.0. ;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next up I need to hone my &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; skills a bit, maybe get a good &lt;em&gt;Agile Web&lt;/em&gt;-style book on making pretty web themes.  Any suggestions?&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Gainful Employment</title>
   <link href="http://finagle.org/2006/11/gainful-employment.html"/>
   <updated>2006-11-12T00:00:00-08:00</updated>
   <id>http://finagle.org/2006/11/gainful-employment</id>
   <content type="html">&lt;p&gt;After a luxurious three months of unemployment, I have once agained joined the ranks of the gainfully employed.  As of Nov. 1 I have accepted a position as a C/C++ coder for &lt;a href=&quot;http://vigilos.com&quot;&gt;Vigilos, Inc.&lt;/a&gt;, who specializes in automated security systems (intrusion detection and access control).&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve now worked for Vigilos for 8 days, and so far I&amp;#8217;m loving it.  Management and the other coders are clueful and in no way pointy-haired.  I&amp;#8217;ve gotten positive reactions to all of my suggestions, which just means we have more good ideas than we have time to implement them.  The codebase is fairly obselete (most the the technologies are over a generation old), so there&amp;#8217;s lots of room to explore things like object recognition and tracking, Machine Learning, stereoopsis, and digital signatures.  And one day I hope to get them to replace the ancient Java client with a real Ruby on Rails web UI.&lt;/p&gt;
&lt;p&gt;While this means I&amp;#8217;ll have more cash for toys and gear, I&amp;#8217;ll also have less time for blogging, among other things.  Also, you can expect that, at least for the foreseeable future, most of my blogging will be C++ related (at least until I can find opportunities to introduce Vigilos to Ruby).  Stay tuned &amp;#8230;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Bug vs. Feature</title>
   <link href="http://finagle.org/2006/10/bug-vs-feature.html"/>
   <updated>2006-10-20T00:00:00-07:00</updated>
   <id>http://finagle.org/2006/10/bug-vs-feature</id>
   <content type="html">&lt;p&gt;A common topic of &lt;del&gt;argument&lt;/del&gt; debate amongst coders has always been whether a particular set of behavior constitutes a bug or a &lt;a href=&quot;http://www.jargon.net/jargonfile/f/feature.html&quot;&gt;feature&lt;/a&gt; (or even a &lt;a href=&quot;http://www.jargon.net/jargonfile/m/misfeature.html&quot;&gt;misfeature&lt;/a&gt;).  After many years of contemplation (and argument), I have come up with a test which I believe can make a definitive classification:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A set of behaviors is a &lt;strong&gt;feature&lt;/strong&gt; &lt;em&gt;if and only if&lt;/em&gt; it can be ignored, disabled, circumvented, disregarded, removed, deactivated or otherwise configured to be completely unnoticeable by the user.  Otherwise, it&amp;#8217;s a &lt;strong&gt;bug&lt;/strong&gt; (or, at best, a misfeature).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As an example I offer autombile air-bags, a fantastic life-saving device, except when it&amp;#8217;s child-killing monstrosity. The solution?  Add a switch to selectively disable them.  &lt;code&gt;Bug + Switch = Feature&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span class=&quot;caps&quot;&gt;QED&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>"Luxury!"</title>
   <link href="http://finagle.org/2006/10/luxury.html"/>
   <updated>2006-10-11T00:00:00-07:00</updated>
   <id>http://finagle.org/2006/10/luxury</id>
   <content type="html">&lt;p&gt;If you&amp;#8217;re reading my obscure blog, you probably saw the &lt;a href=&quot;http://rss.slashdot.org/~r/Slashdot/slashdot/~3/35616214/article.pl&quot;&gt;article on Slashdot&lt;/a&gt; linking to a &lt;a href=&quot;http://sztywny.titaniumhosting.com/2006/07/23/stiff-asks-great-programmers-answers/&quot;&gt;blog article&lt;/a&gt; where various notable programmers answer questions about their history and preferences.  My favorite has got to be:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;How did you learn programming? Were any schools of any use? Or maybe you didn&amp;#8217;t even bother with ending any schools :) ?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://steve-yegge.blogspot.com/&quot;&gt;Steve Yegge&lt;/a&gt;&lt;/strong&gt;:&lt;br /&gt;
I taught myself to program on an HP calculator using their &lt;span class=&quot;caps&quot;&gt;RPN&lt;/span&gt; stack language when I was 17 years old.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now, I&amp;#8217;m a big fan of HP calculators and &lt;span class=&quot;caps&quot;&gt;RPN&lt;/span&gt; (had and loved a 48GX in school), but I never considered it as a good &amp;#8220;development platform&amp;#8221;.  I&amp;#8217;m not sure what it says about Mr. Yegge that he learned to code in &lt;span class=&quot;caps&quot;&gt;RPN&lt;/span&gt; on a calculator, but I think it says it very loudly.&lt;/p&gt;
&lt;p&gt;For the record, I taught myself to program in &lt;span class=&quot;caps&quot;&gt;BASIC&lt;/span&gt; on a &lt;span class=&quot;caps&quot;&gt;VIC&lt;/span&gt;-20 with a cassette tape drive (circa 1983).  But at least it had a &lt;span class=&quot;caps&quot;&gt;QWERTY&lt;/span&gt; keyboard &amp;#8230; &lt;a href=&quot;http://www.phespirit.info/montypython/four_yorkshiremen.htm&quot;&gt;Luxury&lt;/a&gt;.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Linking Outside of the Box: Optimizing Ruby with C/C++</title>
   <link href="http://finagle.org/2006/09/linking-outside-of-the-box-optimizing-ruby-with-c-c.html"/>
   <updated>2006-09-28T00:00:00-07:00</updated>
   <id>http://finagle.org/2006/09/linking-outside-of-the-box-optimizing-ruby-with-c-c</id>
   <content type="html">&lt;h3&gt;Prototyping&lt;/h3&gt;
&lt;p&gt;My first attempt at a routine to &lt;span class=&quot;caps&quot;&gt;XOR&lt;/span&gt; blocks (stored as Strings) looked something like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;xor!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;BLOCK_SIZE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kilobytes&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BLOCK_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;There may very well be a faster way of doing this in pure Ruby, but I couldn&amp;#8217;t find it (and didn&amp;#8217;t want to waste the time).  This worked well enough to finish the basic implementation and unit tests.  And even though this prototype version was way too slow, it allowed me to build-out the higher-level code and tests so that went I went to replace it with the faster version, I had already established extensive code coverage (which revealed several bugs in my optimized implementation).  Once the prototype is complete it&amp;#8217;s time for &amp;#8230;&lt;/p&gt;
&lt;h3&gt;Profiling&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Premature optimization is the root of all evil.&lt;br/&gt;
- Donald Knuth&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Even though I knew that &lt;span class=&quot;caps&quot;&gt;XOR&lt;/span&gt; was going to be the biggest cycle-sink, I decided that now would be a good time to learn about Ruby profiling.  &lt;a href=&quot;http://ruby-prof.rubyforge.org/&quot;&gt;ruby-prof&lt;/a&gt; makes this fairly easy.  I chose my biggest, most involved unit test, and wrapped it like so:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;ruby-prof&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;profile_lotsofstuff&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RubyProf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;test_lotsofstuff&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;RubyProf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GraphPrinter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;STDOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;alias_method&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:test_profile_lotsofstuff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:profile_lotsofstuff&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;PROFILE&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;This allows me to easily profile by running that unit test from the command line:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;clear ; &lt;span class=&quot;nv&quot;&gt;PROFILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 ruby &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;/unit/stuff_test.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;While I&amp;#8217;m still working on tweaking the various output parameters, the result did confirm my suspicions:&lt;/p&gt;
&lt;pre&gt;
  %total   %self     total      self    children             calls   Name
--------------------------------------------------------------------------------
                      8.04      4.97      3.07                 4/4     String#xor!
  96.87%  59.88%      8.04      4.97      3.07                   4     Range#each
                      1.07      1.07      0.00     1048576/1048576     Fixnum#^
                      1.53      1.53      0.00     1572864/1572880     String#[]
                      0.47      0.47      0.00       524288/524288     String#[]=

&lt;/pre&gt;
&lt;h3&gt;Extending with C&lt;/h3&gt;
&lt;p&gt;Especially for tight nested loops like this, you quickly take a bit performance hit just from the loop overhead.  In this case, I also couldn&amp;#8217;t find an easy way to iterate through two strings simultaneously.  After a while, it became quite annoying knowing that I could do the whole thing in a short little C function.&lt;/p&gt;
&lt;p&gt;So that&amp;#8217;s what I did.  I created a small Rails plugin (&lt;code&gt;xor&lt;/code&gt;), with appropriate &lt;code&gt;init.rb&lt;/code&gt;, and added a &lt;code&gt;lib/xor.c&lt;/code&gt; that looks something like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;  &lt;span class=&quot;n&quot;&gt;VALUE&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;string_xor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VALUE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VALUE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STR2CSTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STR2CSTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STR2CSTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RSTRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Init_xor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;rb_define_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rb_cString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;xor!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VALUE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ANYARGS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string_xor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Using the &lt;a href=&quot;onebananaproblem.com/articles/2006/09/09/ruby-extensions-with-rake&quot;&gt;Rake task for Ruby extensions&lt;/a&gt;  from my &lt;a href=&quot;http:rubyforge.org/projects/rdbxml&quot;&gt;&lt;span class=&quot;caps&quot;&gt;RDBXML&lt;/span&gt;&lt;/a&gt; project makes it trivial to build with a small Rakefile:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rake/extensiontask&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Build the XOR extension&amp;quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Rake&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ExtensionTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:xor&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;lib&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;Added some test cases for the various &lt;span class=&quot;caps&quot;&gt;XOR&lt;/span&gt; identities (e.g. &lt;code&gt;x^0 = x&lt;/code&gt;, &lt;code&gt;x^x = 0&lt;/code&gt;, etc.) and that was it.  I kept the pure Ruby version of the function for later (renamed to &lt;code&gt;slow_xor!&lt;/code&gt;).&lt;/p&gt;
&lt;h3&gt;Benchmarking&lt;/h3&gt;
&lt;p&gt;A few runs through the higher-level tests show a &lt;strong&gt;huge&lt;/strong&gt; improvement in speed.  But just how much is that?  It&amp;#8217;s easy to tell with Ruby&amp;#8217;s built-in benchmarking support.  As with the profiling, I find it convenient to hack it onto the existing unit tests, as they already prove a good source of stress-tests.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;benchmark_xor&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Benchmark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;bm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;XOR (c) :&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_xor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module_eval&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alias_method&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:xor!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:slow_xor!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;bm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;XOR (rb):&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_xor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;alias_method&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:test_benchmark_xor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:benchmark_xor&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;BENCHMARK&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;pre&gt;              user     system      total        real
XOR (c) :  1.200000   0.116667   1.316667 (  0.817143)
XOR (rb): 81.433333   0.683333  82.116667 ( 50.567826)
&lt;/pre&gt;
&lt;p&gt;This shows a speed-up of a little over 60&amp;#215;.    This changes the execution times for just about every operation from &amp;#8220;minutes&amp;#8221; into &amp;#8220;seconds&amp;#8221;.  Not bad, eh?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your Milleage May Vary&lt;/p&gt;
&lt;/blockquote&gt;</content>
 </entry>
 
 <entry>
   <title>ODIN: Secure P2P on the Web</title>
   <link href="http://finagle.org/2006/09/odin.html"/>
   <updated>2006-09-25T00:00:00-07:00</updated>
   <id>http://finagle.org/2006/09/odin</id>
   <content type="html">&lt;p&gt;The first thing you need to understand for this to make sense is that the magic of &lt;span class=&quot;caps&quot;&gt;OFF&lt;/span&gt; is all in the &lt;a href=&quot;http://wiki.offdev.org/Technical_Overview_of_OFF&quot;&gt;block encoding&lt;/a&gt; which turns meaningful bits into ownerless, quasi-random blocks identified by their SHA1 hashes.  Once this transformation is performed, there is no way for anyone to know the content of a block on the network, as it has no meaning until it&amp;#8217;s combined with other blocks (and, in that way, may actually &amp;#8220;belong&amp;#8221; to multiple files, simultaneously).&lt;/p&gt;
&lt;p&gt;The thing that first screamed &amp;#8220;Rails app!&amp;#8221; to me is the fact that, once the content has been &lt;span class=&quot;caps&quot;&gt;OFF&lt;/span&gt;-encoded into blocks, any transport mechanism can be used to move these blocks around, allowing for a network-agnostic peer-to-peer system.  Using &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt;, I could write my own smart, caching web peer (with combined web UI) in Rails, but since it&amp;#8217;s using &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt;, I could also use dumb web server file servers as mass block stores (no &lt;span class=&quot;caps&quot;&gt;CGI&lt;/span&gt; required!).  Eventually, I could add (trivial) support to talk to the existing &lt;span class=&quot;caps&quot;&gt;OFF&lt;/span&gt; network (also &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt;, &lt;span class=&quot;caps&quot;&gt;AFAIK&lt;/span&gt;). If I watned to get really crazy, I could make the app a 3-way network bridge with BitTorrent (which also uses SHA1-identified data blocks).&lt;/p&gt;
&lt;p&gt;This is an extension of earlier musings about extending &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt; (or coming up with some other standard) for enumerating mirrors of a particular web resource, something like a per-directory &lt;span class=&quot;caps&quot;&gt;MIRROR&lt;/span&gt; file (in &lt;span class=&quot;caps&quot;&gt;XML&lt;/span&gt;).  A local web-proxy/daemon would cache the status, speed, and locality of various mirrors, and attempt to provide the best location for a particular resource (Use Case #1: Linux &lt;span class=&quot;caps&quot;&gt;RPM&lt;/span&gt; repositories).  Throw in resource discovery, and you have a basic peer-to-peer network, all over &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt;.  While this project assumes that each peer is serving &lt;span class=&quot;caps&quot;&gt;OFF&lt;/span&gt;-encoded blocks, there&amp;#8217;s no reason why this assumption couldn&amp;#8217;t be refactored-out, leaving a generic &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt; P2P system.&lt;/p&gt;
&lt;p&gt;To date I&amp;#8217;ve already completed most of the functionality of &lt;span class=&quot;caps&quot;&gt;ODIN&lt;/span&gt;: fast block encoding (more on that later), file insertion and extraction, basic file transfer and peer discovery.  I&amp;#8217;ll post more when I have something to show-off. ;)&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Building Ruby Extensions with Rake</title>
   <link href="http://finagle.org/2006/09/building-ruby-extensions-with-rake.html"/>
   <updated>2006-09-09T00:00:00-07:00</updated>
   <id>http://finagle.org/2006/09/building-ruby-extensions-with-rake</id>
   <content type="html">&lt;p&gt;At the moment, the tasks are a part of the &lt;span class=&quot;caps&quot;&gt;RDBXML&lt;/span&gt; project, hosted by &lt;a href=&quot;http://rubyforge.org&quot;&gt;RubyForge&lt;/a&gt; .  There is &lt;a href=&quot;http://rdbxml.rubyforge.org/classes/Rake.html&quot;&gt;documentation&lt;/a&gt;, and you can view the latest version in &lt;a href=&quot;http://rubyforge.org/plugins/scmsvn/viewcvs.php/trunk/rake/?root=rdbxml&quot;&gt;&lt;span class=&quot;caps&quot;&gt;SVN&lt;/span&gt; here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Usage is simple enough:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rake/swigextensiontask&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Build the BDB interface extension&amp;quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Rake&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SWIGExtensionTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:db&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;ext&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link_libs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;db&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;db_cxx&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;p&gt;This will build &lt;code&gt;db.so&lt;/code&gt;, from the &lt;code&gt;db.i&lt;/code&gt; &lt;span class=&quot;caps&quot;&gt;SWIG&lt;/span&gt; interface file in the &lt;code&gt;ext&lt;/code&gt; directory, linking-aginst &lt;code&gt;db.so&lt;/code&gt; and &lt;code&gt;db_cxx.so&lt;/code&gt;.  For a full usage example, see the &lt;a href=&quot;http://rubyforge.org/plugins/scmsvn/viewcvs.php/trunk/Rakefile?root=rdbxml&amp;amp;view=markup&quot;&gt;Rakefile for &lt;span class=&quot;caps&quot;&gt;RDBXML&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Typo w/ Rails Installer: The New Hotness</title>
   <link href="http://finagle.org/2006/07/typo-w-rails-installer-the-new-hotness.html"/>
   <updated>2006-07-20T00:00:00-07:00</updated>
   <id>http://finagle.org/2006/07/typo-w-rails-installer-the-new-hotness</id>
   <content type="html">&lt;p&gt;So I had this very long and in-depth article almost-completely written article, detailing the nifty hacks I used to deploy &lt;a href=&quot;http://www.onebananaproblem.com&quot;&gt;this website&lt;/a&gt; on top of &lt;a href=&quot;http://typosphere.org&quot;&gt;Typo&lt;/a&gt;, using &lt;a href=&quot;http://manuals.rubyonrails.com/read/book/17&quot;&gt;Capistrano&lt;/a&gt; and a litle script to symlink them together.  It was beautiful and elegant &amp;#8230; and now completely useless thanks to &lt;a href=&quot;http://scottstuff.net/blog/articles/trackback/2646&quot;&gt;Typo 4&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;The magic is in the &lt;a href=&quot;http://rubyforge.org/projects/rails-installer/&quot;&gt;Rails Installer&lt;/a&gt;, a handy little gem for doing end-user installs.  Makes my elegant little hacks a little silly.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;sigh&lt;/em&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>I. HATE. PERL</title>
   <link href="http://finagle.org/2006/07/i-hate-perl.html"/>
   <updated>2006-07-20T00:00:00-07:00</updated>
   <id>http://finagle.org/2006/07/i-hate-perl</id>
   <content type="html">&lt;p&gt;&lt;code&gt;man&lt;/code&gt; &lt;code&gt;perlop&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Equality Operators&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Binary &amp;#8220;==&amp;#8221; returns true if the left argument is numerically equal to the right argument.&lt;/p&gt;
&lt;p&gt;Binary &amp;#8220;eq&amp;#8221; returns true if the left argument is stringwise equal to the right argument.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Is &amp;#8220;foo&amp;#8221; &lt;em&gt;numerically equal&lt;/em&gt; to &amp;#8220;bar&amp;#8221;?  Wrong, take a drink.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>A Few of My Favorite Things</title>
   <link href="http://finagle.org/2006/07/a-few-of-my-favorite-things.html"/>
   <updated>2006-07-02T00:00:00-07:00</updated>
   <id>http://finagle.org/2006/07/a-few-of-my-favorite-things</id>
   <content type="html">&lt;h3&gt;Ruby Development&lt;/h3&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://ruby-lag.org&quot;&gt;Ruby&lt;/a&gt; (1.8.4)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://rubyforge.org/projects/rubygems/&quot;&gt;RubyGems&lt;/a&gt; (0.8.11)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://kdevelop.org&quot;&gt;KDevelop&lt;/a&gt; (3.3.2)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://nano-editor.org&quot;&gt;Nano&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://subversion.tigris.org&quot;&gt;Subversion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The barest of essentials.  If you don&amp;#8217;t already have Ruby and RubyGems, you&amp;#8217;ve come to the &lt;em&gt;wrong&lt;/em&gt; place.&lt;/p&gt;
&lt;p&gt;I highly recommend the &amp;#8220;KDevelop &lt;span class=&quot;caps&quot;&gt;IDE&lt;/span&gt;&amp;#8221;:&lt;a href=&quot;http://kdevelop.org&quot;&gt;KDevelop&lt;/a&gt; for all of your bit-flinging needs.  I grew to love it when doing C++ code, and it works just as well for Ruby.  For times when you just want to tweak a config file, and a full &lt;span class=&quot;caps&quot;&gt;IDE&lt;/span&gt; is overkill, &lt;a href=&quot;http://nano-editor.org&quot;&gt;nano&lt;/a&gt; is your best bet.  An excellent lightweight text editor with syntax highlighting, multiple file buffers, and&lt;br /&gt;
search-n-replace.&lt;/p&gt;
&lt;p&gt;Finally, &lt;a href=&quot;http://subversion.tigris.org&quot;&gt;Subversion&lt;/a&gt; is by far the best source control system I&amp;#8217;ve ever used (including &lt;span class=&quot;caps&quot;&gt;CVS&lt;/span&gt;, SourceSafe, Continuus, and Perforce).  Aside from its sane handling of symlinks and binary files, the ability to include external Subervsion repositories by reference makes it a must for including Rails plugins.&lt;/p&gt;
&lt;h3&gt;Rails&lt;/h3&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://rubyonrails.com&quot;&gt;Rails&lt;/a&gt; 1.1&lt;/li&gt;
	&lt;li&gt;&amp;#8220;Autotest&amp;#8221;:&lt;a href=&quot;http://subversion.tigris.org&quot;&gt;Subversion&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://redgreenblu.com/svn/projects/assert_valid_markup/&quot;&gt;assert_valid_markup&lt;/a&gt; (plugin)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://svn.vivabit.net/external/rubylibs/request_routing/&quot;&gt;request_routing&lt;/a&gt; (plugin)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The only-slightly-nude essentials.  I don&amp;#8217;t bother with EdgeRails as I&amp;#8217;m still playing catch-up trying to grok all the spiffy features in 1.1.&lt;/p&gt;
&lt;p&gt;If you only use one Rails plugin &amp;#8230; you&amp;#8217;re an idiot.  But if it&amp;#8217;s &lt;a href=&quot;http://redgreenblu.com/svn/projects/assert_valid_markup/&quot;&gt;assert_valid_markup&lt;/a&gt;, at least you&amp;#8217;re an idiot with standards-compliant web sites.  Adding assert_valid_markup to your functional tests ensures that the &lt;span class=&quot;caps&quot;&gt;XHTML&lt;/span&gt; content validates using the W3C validator.  I&amp;#8217;ve also added an assert_val id_css function to validate stylesheets as well (need to get that added, one of these days).&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re running multiple websites, you&amp;#8217;ll also want the &lt;a href=&quot;http://svn.vivabit.net/external/rubylibs/request_routing/&quot;&gt;request_routing plugin&lt;/a&gt;.  It makes it easy to create routes that look at things like domain (for virtual hosting). Very handy.&lt;/p&gt;
&lt;h3&gt;Databases&lt;/h3&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://mysql.com&quot;&gt;MySQL&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.postgresql.org/&quot;&gt;PostgreSQL&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://dev.sleepycat.com/documentation/bdbxml.html&quot;&gt;&lt;span class=&quot;caps&quot;&gt;BDB&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;XML&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I use &lt;a href=&quot;http://mysql.com&quot;&gt;MySQL&lt;/a&gt; almost exclusively, only because it&amp;#8217;s th easiest to setup and administer for small sites.  &lt;a href=&quot;http://www.postgresql.org/&quot;&gt;PostgresQL&lt;/a&gt; is good for that grown-up, Oracle feeling, but also comes with that Oracle footprint.&lt;/p&gt;
&lt;p&gt;With Web Services being all the rage these days, big monolithic databases are looking more and more like they&amp;#8217;re more trouble than they&amp;#8217;re worth.  What&amp;#8217;s wrong with nimble, embedded &lt;span class=&quot;caps&quot;&gt;DBS&lt;/span&gt;?  And sure, tables work great for accounting, but if you want that juicy &lt;a href=&quot;http://www.w3.org/TR/xquery/&quot;&gt;XQuery&lt;/a&gt; goodness, &lt;a href=&quot;http://dev.sleepycat.com/documentation/bdbxml.html&quot;&gt;&lt;span class=&quot;caps&quot;&gt;BDB&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;XML&lt;/span&gt;&lt;/a&gt; is the new hotness.&lt;/p&gt;
&lt;h3&gt;Administration&lt;/h3&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://lighttpd.net&quot;&gt;Lighttpd&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://manuals.rubyonrails.com/read/book/17&quot;&gt;Capistrano&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So you&amp;#8217;ve got your Google-killing website writen, tested, validated, and checked-in.  Now you actually need to get it on the IntarWeb.  First you need a webserver (what,&lt;br /&gt;
you want Rails to do &lt;em&gt;everything&lt;/em&gt;?).  I&amp;#8217;ve used Apache for many many moons, but recently made the switch to &lt;a href=&quot;http://lighttpd.net&quot;&gt;Lighttpd&lt;/a&gt;, and haven&amp;#8217;t looked back.  With memory usage less than &lt;em&gt;one-tenth&lt;/em&gt; of Apache, is a must for shared/leased hosts where memory is scarce.  It supports virtual hosting, &lt;span class=&quot;caps&quot;&gt;SSL&lt;/span&gt;, FastCGI, rewrite/redirect, anti-deep-linking measures, and all with a config format that&amp;#8217;s simple and pleasantly script-like.&lt;/p&gt;
&lt;p&gt;Now that we have our website and web server, we need to get the former onto the later.  That&amp;#8217;s where &lt;a href=&quot;http://manuals.rubyonrails.com/read/book/17&quot;&gt;Capistrano&lt;/a&gt; comes in.  With a simple Ruby config file, you can easily&lt;br /&gt;
deploy your website to any number of web/db/application host machines (and then roll it back when you discover some horrific bug).  No professional Rails setup should be&lt;br /&gt;
without it.&lt;/p&gt;
&lt;h3&gt;The IntarWeb&lt;/h3&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://speakeasy.net&quot;&gt;Speakeasy&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://rimuhosting.com&quot;&gt;RimuHosting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have residential &lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt; services through &lt;a href=&quot;http://speakeasy.net&quot;&gt;Speakeasy&lt;/a&gt;, on which I run my secondary web server.  Speakeasy has good prices and service, especially for geeks who have outrageous demands like static IPs.&lt;/p&gt;
&lt;p&gt;Once I hit the critical mass of websites such that I didn&amp;#8217;t want to host them on my home server, I looked around for a decent hosting company, and discovered &lt;a href=&quot;http://rimuhosting.com&quot;&gt;RimuHosting&lt;/a&gt;.  They provide virtual servers, with your choice of OS, for dirt-cheap (e.g. $20/mo.).  In fact, I just upgraded my server (MySQL is such a &lt;span class=&quot;caps&quot;&gt;RAM&lt;/span&gt;-hog), and they threw in another 32MB free, just because they could.  We like free stuff (and companies that aren&amp;#8217;t afraid to give it).  I recommend highly.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Grooming My Inner CodeMonkey</title>
   <link href="http://finagle.org/2006/06/grooming-my-inner-codemonkey.html"/>
   <updated>2006-06-10T00:00:00-07:00</updated>
   <id>http://finagle.org/2006/06/grooming-my-inner-codemonkey</id>
   <content type="html">&lt;p&gt;Gooday, eh? This is my coding blog, and welcome to it.&lt;/p&gt;
&lt;p&gt;First, I should probably give credit for the inspiration for this blog to the &lt;a href=&quot;podcast.rubyonrails.com&quot;&gt;Ruby on Rails Podcast&lt;/a&gt;. It introduced me to the Ruby  and Rails community, and some of the cool stuff people are doing with it (&lt;a href=&quot;rspec.rubyforge.org&quot;&gt;&lt;span class=&quot;caps&quot;&gt;BDD&lt;/span&gt;&lt;/a&gt; especially caught my ear).  I decided that I had enough thoughts rolling around in my head that might be of use or interest to others, that I should hop on the blog-wagon.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m also using this site as a test-bed for some Rails experimentation, starting with using &lt;a href=&quot;typosphere.org&quot;&gt;Typo&lt;/a&gt; as a base, to which I can add some of my own Rails goodness.&lt;/p&gt;
&lt;p&gt;Enjoy &amp;#8230;&lt;/p&gt;</content>
 </entry>
 

</feed>
